[{"path":"https://markean.github.io/melt/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, interest fostering open welcoming community, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality. Examples unacceptable behavior participants include: use sexualized language imagery Personal attacks Trolling insulting/derogatory comments Public private harassment Publishing ’s private information, physical electronic addresses, without explicit permission unethical unprofessional conduct Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful. adopting Code Conduct, project maintainers commit fairly consistently applying principles every aspect managing project. Project maintainers follow enforce Code Conduct may permanently removed project team. Code Conduct applies within project spaces public spaces individual representing project community. Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project maintainer. complaints reviewed investigated result response deemed necessary appropriate circumstances. Maintainers obligated maintain confidentiality regard reporter incident. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.3.0, available https://www.contributor-covenant.org/version/1/3/0/code--conduct.html","code":""},{"path":"https://markean.github.io/melt/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to melt","title":"Contributing to melt","text":"R package melt stable state development, degree subsequent development planned authors. welcome contributions package. Please submit questions, bug reports, requests issues. ’ve found bug, please file issue illustrates bug minimal reprex. want make bigger change, ’s good idea first file issue fork repository needed.","code":""},{"path":"https://markean.github.io/melt/CONTRIBUTING.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Contributing to melt","text":": Additional options families link functions el_glm(). Additional model diagnostic tools. Additional multiple testing options. Additional optimization routines. : parallelization schemes boot, RcppParallel, etc. OpenMP employed parallel computing. unit tests also written assumption OpenMP available, although availability affect test results. Methods -identified models.","code":""},{"path":"https://markean.github.io/melt/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code style","title":"Contributing to melt","text":"generally follow tidyverse style guide. can use styler package apply styles. function variable names use snake_case. S4 class names use UpperCamelCase. S4 generics methods use lowerCamelCase. guidelines also apply C++ code style. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://markean.github.io/melt/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to melt","text":"Please note melt project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://markean.github.io/melt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://markean.github.io/melt/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://markean.github.io/melt/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://markean.github.io/melt/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://markean.github.io/melt/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://markean.github.io/melt/articles/model.html","id":"fitting-an-el-object","dir":"Articles","previous_headings":"","what":"Fitting an EL object","title":"Model fitting","text":"melt package provides several functions construct EL object object inherits EL: el_mean() mean. el_sd() standard deviation. el_lm() linear models. el_glm() generalized linear models. illustrate usage el_mean() faithful data set. Suppose interested evaluating empirical likelihood (3.5, 70). faithful data frame coerced numeric matrix. Simple print method shows essential information fit. Note maximum empirical likelihood estimates sample average. chi-square value shown corresponds minus twice empirical log-likelihood ratio. asymptotic chi-square distribution 2 degrees freedom null hypothesis. Hence \\(p\\)-value exact. convergence status bottom can used check convex hull constraint. Weighted data can handled supplying weights argument. non-NULL weights, weighted empirical likelihood computed. valid weights re-scaled internal computation add total number observations. simplicity, use faithful$waiting weight vector. get different results, estimates now weighted sample average. chi-square value associated \\(p\\)-value based limit theorem, care must taken interpreting results since largely affected limiting behavior weights.","code":"data(\"faithful\") str(faithful) #> 'data.frame':    272 obs. of  2 variables: #>  $ eruptions: num  3.6 1.8 3.33 2.28 4.53 ... #>  $ waiting  : num  79 54 74 62 85 55 88 85 51 85 ... summary(faithful) #>    eruptions        waiting     #>  Min.   :1.600   Min.   :43.0   #>  1st Qu.:2.163   1st Qu.:58.0   #>  Median :4.000   Median :76.0   #>  Mean   :3.488   Mean   :70.9   #>  3rd Qu.:4.454   3rd Qu.:82.0   #>  Max.   :5.100   Max.   :96.0 fit <- el_mean(faithful, par = c(3.5, 70)) class(fit) #> [1] \"EL\" #> attr(,\"package\") #> [1] \"melt\" showClass(\"EL\") #> Class \"EL\" [package \"melt\"] #>  #> Slots: #>                                                                         #> Name:         optim         logp         logl        loglr    statistic #> Class:         list      numeric      numeric      numeric      numeric #>                                                                         #> Name:            df         pval         nobs         npar      weights #> Class:      integer      numeric      integer      integer      numeric #>                                               #> Name:  coefficients       method         data #> Class:      numeric    character          ANY #>  #> Known Subclasses:  #> Class \"CEL\", directly #> Class \"SD\", directly #> Class \"LM\", by class \"CEL\", distance 2 #> Class \"GLM\", by class \"CEL\", distance 3 #> Class \"QGLM\", by class \"GLM\", distance 4 fit #>  #>  Empirical Likelihood #>  #> Model: mean  #>  #> Maximum EL estimates: #> eruptions   waiting  #>     3.488    70.897  #>  #> Chisq: 8.483, df: 2, Pr(>Chisq): 0.01439 #>  #> EL evaluation: converged w <- faithful$waiting (wfit <- el_mean(faithful, par = c(3.5, 70), weights = w)) #>  #>  Weighted Empirical Likelihood #>  #> Model: mean  #>  #> Maximum EL estimates: #> eruptions   waiting  #>     3.684    73.494  #>  #> Chisq: 25.41, df: 2, Pr(>Chisq): 3.039e-06 #>  #> EL evaluation: converged"},{"path":"https://markean.github.io/melt/articles/performance.html","id":"empirical-likelihood-computation","dir":"Articles","previous_headings":"","what":"Empirical likelihood computation","title":"Performance","text":"show performance computing empirical likelihood el_mean(). test computation speed simulated data sets two different settings: 1) number observations increases number parameters fixed, 2) number parameters increases number observations fixed.","code":""},{"path":"https://markean.github.io/melt/articles/performance.html","id":"increasing-the-number-of-observations","dir":"Articles","previous_headings":"Empirical likelihood computation","what":"Increasing the number of observations","title":"Performance","text":"fix number parameters \\(p = 10\\), simulate parameter value \\(n \\times p\\) matrices using rnorm(). order ensure convergence large \\(n\\), set large threshold value using el_control(). results:","code":"set.seed(3175775) p <- 10 par <- rnorm(p, sd = 0.1) ctrl <- el_control(th = 1e+10) result <- microbenchmark(   n1e2 = el_mean(matrix(rnorm(100 * p), ncol = p), par = par, control = ctrl),   n1e3 = el_mean(matrix(rnorm(1000 * p), ncol = p), par = par, control = ctrl),   n1e4 = el_mean(matrix(rnorm(10000 * p), ncol = p), par = par, control = ctrl),   n1e5 = el_mean(matrix(rnorm(100000 * p), ncol = p), par = par, control = ctrl) ) result #> Unit: microseconds #>  expr      min        lq       mean    median       uq      max neval #>  n1e2    604.5    627.40    670.641    654.55    719.5    789.9   100 #>  n1e3   1731.7   1905.75   2059.704   2034.00   2168.0   2610.3   100 #>  n1e4  15436.1  16843.90  20044.771  20475.20  22268.1  26742.4   100 #>  n1e5 291233.7 335427.10 390403.032 373769.05 447277.9 511351.0   100 autoplot(result)"},{"path":"https://markean.github.io/melt/articles/performance.html","id":"increasing-the-number-of-parameters","dir":"Articles","previous_headings":"Empirical likelihood computation","what":"Increasing the number of parameters","title":"Performance","text":"time fix number observations \\(n = 1000\\), evaluate empirical likelihood zero vectors different sizes. average, evaluating empirical likelihood 100000×10 1000×400 matrix parameter value satisfying convex hull constraint takes less second.","code":"n <- 1000 result2 <- microbenchmark(   p5 = el_mean(matrix(rnorm(n * 5), ncol = 5),     par = rep(0, 5),     control = ctrl   ),   p25 = el_mean(matrix(rnorm(n * 25), ncol = 25),     par = rep(0, 25),     control = ctrl   ),   p100 = el_mean(matrix(rnorm(n * 100), ncol = 100),     par = rep(0, 100),     control = ctrl   ),   p400 = el_mean(matrix(rnorm(n * 400), ncol = 400),     par = rep(0, 400),     control = ctrl   ) ) result2 #> Unit: microseconds #>  expr      min        lq       mean    median        uq      max neval #>    p5    995.9   1051.25   1156.793   1112.65   1185.85   4710.9   100 #>   p25   3921.5   4004.30   4079.713   4047.80   4137.75   4497.6   100 #>  p100  30690.2  33910.75  35822.722  34085.60  37462.65  57377.7   100 #>  p400 354757.3 388256.85 436836.924 419268.80 452327.65 641131.5   100 autoplot(result2)"},{"path":"https://markean.github.io/melt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eunseop Kim. Author, maintainer. Steven MacEachern. Contributor, thesis advisor. Mario Peruggia. Contributor, thesis advisor. Pierre Chausse. Reviewer. Alex Stringer. Reviewer.","code":""},{"path":"https://markean.github.io/melt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kim E (2022). melt: Multiple Empirical Likelihood Tests. https://github.com/markean/melt, https://markean.github.io/melt/.","code":"@Manual{,   title = {melt: Multiple Empirical Likelihood Tests},   author = {Eunseop Kim},   year = {2022},   note = {https://github.com/markean/melt, https://markean.github.io/melt/}, }"},{"path":[]},{"path":"https://markean.github.io/melt/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Multiple Empirical Likelihood Tests","text":"Empirical likelihood enables nonparametric, likelihood-driven style inference without relying assumptions frequently made parametric models. Empirical likelihood-based tests asymptotically pivotal thus avoid explicit studentization, making also challenging methods directly extended packages parametric models. R package melt aims bridge gap provide unified framework data analysis empirical likelihood methods. collection functions available perform multiple empirical likelihood tests construct confidence intervals linear generalized linear models R. package offers easy--use interface flexibility specifying hypotheses calibration methods, extending framework simultaneous inference. core computational routines implemented Eigen C++ library RcppEigen interface, OpenMP parallel computation. Details testing procedures given Kim, MacEachern, Peruggia (2021). work supported U.S. National Science Foundation Grants . SES-1921523 DMS-2015552.","code":""},{"path":"https://markean.github.io/melt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multiple Empirical Likelihood Tests","text":"can install latest stable release CRAN. can install latest development version Github.","code":"install.packages(\"melt\") # install.packages(\"devtools\") devtools::install_github(\"markean/melt\")"},{"path":"https://markean.github.io/melt/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Multiple Empirical Likelihood Tests","text":"","code":"library(melt)  # Test for the mean data(\"precip\") fit <- el_mean(precip, par = 30) fit #>  #>  Empirical Likelihood #>  #> Model: mean  #>  #> Maximum EL estimates: #> [1] 34.89 #>  #> Chisq: 8.285, df: 1, Pr(>Chisq): 0.003998 #>  #> EL evaluation: converged   # Linear regression data(\"mtcars\") fit2 <- el_lm(mpg ~ disp + hp + wt + qsec, data = mtcars) summary(fit2) #>  #> Call: #> el_lm(formula = mpg ~ disp + hp + wt + qsec, data = mtcars) #>  #> Coefficients: #>              Estimate   Chisq Pr(>Chisq)     #> (Intercept) 27.329638 443.208    < 2e-16 *** #> disp         0.002666   0.365    0.54575     #> hp          -0.018666  10.730    0.00105 **  #> wt          -4.609123 439.232    < 2e-16 *** #> qsec         0.544160 440.583    < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Chisq: 433.4, df: 4, Pr(>Chisq): < 2.2e-16 #>  #> Constrained EL: converged cr <- confreg(fit2, parm = c(\"disp\", \"hp\"), npoints = 200) plot(cr) # Analysis of variance data(\"clothianidin\") fit3 <- el_lm(clo ~ -1 + trt, data = clothianidin) summary(fit3) #>  #> Call: #> el_lm(formula = clo ~ -1 + trt, data = clothianidin) #>  #> Coefficients: #>              Estimate   Chisq Pr(>Chisq)     #> trtNaked       -4.479 411.072    < 2e-16 *** #> trtFungicide   -3.427  59.486   1.23e-14 *** #> trtLow         -2.800  62.955   2.11e-15 *** #> trtHigh        -1.307   4.653      0.031 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Chisq: 894.4, df: 4, Pr(>Chisq): < 2.2e-16 #>  #> EL evaluation: not converged confint(fit3) #>                  lower      upper #> trtNaked     -5.002118 -3.9198229 #> trtFungicide -4.109816 -2.6069870 #> trtLow       -3.681837 -1.9031795 #> trtHigh      -2.499165 -0.1157222   # Test of no treatment effect contrast <- matrix(c(   1, -1, 0, 0,   0, 1, -1, 0,   0, 0, 1, -1 ), byrow = TRUE, nrow = 3) elt(fit3, lhs = contrast) #>  #>  Empirical Likelihood Test #>  #> Significance level: 0.05, Calibration: Chi-square  #>  #> Statistic: 26.59804, Critical value: 7.814728  #>  #> p-value: 7.147731e-06"},{"path":"https://markean.github.io/melt/reference/CEL-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CEL class — CEL-class","title":"CEL class — CEL-class","text":"S4 class constrained empirical likelihood. inherits EL class. Note optim slot constrained optimization results respect parameters, Lagrange multiplier.","code":""},{"path":"https://markean.github.io/melt/reference/CEL-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CEL class — CEL-class","text":"Let \\(l(\\theta)\\) denote minus twice empirical log-likelihood ratio function. consider linear hypothesis form $$L\\theta = r,$$ left-hand-side \\(L\\) \\(q\\) \\(p\\) matrix right-hand-side \\(r\\) \\(q\\)-dimensional vector. regularity conditions, \\(l(\\theta)\\) converges distribution \\(\\chi^2_q\\) constraint hypothesis, .e., $$\\min_{\\theta: L\\theta = r} l(\\theta) \\to_d \\chi^2_q .$$ Minimization \\(l(\\theta)\\) respect \\(\\theta\\) computationally expensive since implicitly involves evaluation step described EL. , depending form \\(g(X_i, \\theta)\\) constraint, optimization problem can nonconvex multiple local minima. reason, package melt considers linear hypotheses performs local minimization \\(l(\\theta)\\) using projected gradient descent method. orthogonal projection matrix \\(P\\) step size \\(\\gamma\\), algorithm updates \\(\\theta\\) $$\\theta^{(k + 1)} \\leftarrow \\theta^{(k)} -   \\gamma P \\nabla l(\\theta^{(k)}),$$ \\(\\nabla l(\\theta^{(k)})\\) denotes gradient \\(l\\) \\(\\theta^{(k)}\\). first order optimality condition \\(P \\nabla l(\\theta) = 0\\), used stopping criterion.","code":""},{"path":"https://markean.github.io/melt/reference/CEL-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CEL class — CEL-class","text":"optim list following optimization results: par numeric vector parameter value minimizes empirical likelihood subject constraints. lambda numeric vector Lagrange multipliers. iterations single integer number iterations performed. convergence single logical convergence status.","code":""},{"path":"https://markean.github.io/melt/reference/CEL-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"CEL class — CEL-class","text":"Adimari G, Guolo (2010). “Note Asymptotic Behaviour Empirical Likelihood Statistics.” Statistical Methods & Applications, 19(4), 463--476. doi:10.1007/s10260-010-0137-9 . Qin J, Lawless J (1995). “Estimating Equations, Empirical Likelihood Constraints Parameters.” Canadian Journal Statistics, 23(2), 145--159. doi:10.2307/3315441 .","code":""},{"path":"https://markean.github.io/melt/reference/CEL-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CEL class — CEL-class","text":"","code":"showClass(\"CEL\") #> Class \"CEL\" [package \"melt\"] #>  #> Slots: #>                                                                         #> Name:         optim         logp         logl        loglr    statistic #> Class:         list      numeric      numeric      numeric      numeric #>                                                                         #> Name:            df         pval         nobs         npar      weights #> Class:      integer      numeric      integer      integer      numeric #>                                               #> Name:  coefficients       method         data #> Class:      numeric    character          ANY #>  #> Extends: \"EL\" #>  #> Known Subclasses:  #> Class \"LM\", directly #> Class \"GLM\", by class \"LM\", distance 2 #> Class \"QGLM\", by class \"GLM\", distance 3"},{"path":"https://markean.github.io/melt/reference/ConfregEL-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ConfregEL class — ConfregEL-class","title":"ConfregEL class — ConfregEL-class","text":"S4 class confidence region.","code":""},{"path":"https://markean.github.io/melt/reference/ConfregEL-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ConfregEL class — ConfregEL-class","text":"estimates numeric vector length two parameter estimates. level single numeric confidence level required. cv single numeric critical value calibration empirical likelihood ratio statistic. pnames character vector length two name parameters.","code":""},{"path":"https://markean.github.io/melt/reference/ConfregEL-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ConfregEL class — ConfregEL-class","text":"","code":"showClass(\"ConfregEL\") #> Class \"ConfregEL\" [package \"melt\"] #>  #> Slots: #>                                                          #> Name:      .Data estimates     level        cv    pnames #> Class:    matrix   numeric   numeric   numeric character #>  #> Extends:  #> Class \"matrix\", from data part #> Class \"array\", by class \"matrix\", distance 2 #> Class \"structure\", by class \"matrix\", distance 3 #> Class \"vector\", by class \"matrix\", distance 4, with explicit coerce"},{"path":"https://markean.github.io/melt/reference/ControlEL-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ControlEL class — ControlEL-class","title":"ControlEL class — ControlEL-class","text":"S4 class computational details empirical likelihood.","code":""},{"path":"https://markean.github.io/melt/reference/ControlEL-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ControlEL class — ControlEL-class","text":"maxit single integer maximum number iterations optimization respect \\(\\theta\\). maxit_l single integer maximum number iterations optimization respect \\(\\lambda\\). tol single numeric convergence tolerance denoted \\(\\epsilon\\). iteration stops $$\\|P \\nabla l(\\theta^{(k)})\\| < \\epsilon.$$ tol_l single numeric relative convergence tolerance denoted \\(\\delta\\). iteration stops $$\\|\\lambda^{(k)} - \\lambda^{(k - 1)}\\| <   \\delta\\|\\lambda^{(k - 1)}\\| + \\delta^2.$$ step single numeric step size \\(\\gamma\\) projected gradient descent method. th single numeric threshold negative empirical log-likelihood ratio. verbose single logical whether print message convergence status. keep_data single logical whether nthreads single integer number threads parallel computation via OpenMP (available). seed single integer seed random number generation. b single integer number bootstrap replicates. m single integer number Monte Carlo samples.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/ControlEL-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ControlEL class — ControlEL-class","text":"","code":"showClass(\"ControlEL\") #> Class \"ControlEL\" [package \"melt\"] #>  #> Slots: #>                                                                              #> Name:      maxit   maxit_l       tol     tol_l      step        th   verbose #> Class:   integer   integer   numeric   numeric       ANY       ANY   logical #>                                                          #> Name:  keep_data  nthreads      seed         b         m #> Class:   logical   integer   integer   integer   integer"},{"path":"https://markean.github.io/melt/reference/EL-class.html","id":null,"dir":"Reference","previous_headings":"","what":"EL class — EL-class","title":"EL class — EL-class","text":"S4 class empirical likelihood.","code":""},{"path":"https://markean.github.io/melt/reference/EL-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EL class — EL-class","text":"Let \\(X_i\\) independent identically distributed \\(p\\)-dimensional random variable unknown distribution \\(P\\) \\(= 1, \\dots, n\\). assume \\(P\\) positive definite covariance matrix. parameter interest \\(\\theta(F) \\{\\rm{\\!R}}^p\\), consider \\(p\\)-dimensional smooth estimating function \\(g(X_i, \\theta)\\) moment condition $$\\textrm{E}[g(X_i, \\theta)] = 0.$$ assume exists unique \\(\\theta_0\\) solves equation. Given value \\(\\theta\\), (profile) empirical likelihood ratio defined $$R(\\theta) =   \\max_{p_i}\\left\\{\\prod_{= 1}^n np_i :   \\sum_{= 1}^n p_i g(X_i, \\theta) = 0, p_i \\geq 0, \\sum_{= 1}^n p_i = 1   \\right\\}.$$ Lagrange multiplier \\(\\lambda \\equiv \\lambda(\\theta)\\) dual problem leads $$p_i = \\frac{1}{n}\\frac{1}{1 + \\lambda^\\top g(X_i, \\theta)},$$ \\(\\lambda\\) solves $$\\frac{1}{n}\\sum_{= 1}^n \\frac{g(X_i, \\theta)}   {1 + \\lambda^\\top g(X_i, \\theta)} = 0.$$ empirical log-likelihood ratio given $$\\log R(\\theta) = -\\sum_{= 1}^n   \\log(1 + \\lambda^\\top g(X_i, \\theta)).$$ problem can efficiently solved Newton-Raphson method zero vector contained interior convex hull \\(\\{g(X_i, \\theta)\\}_{= 1}^n\\). known \\(-2\\log R(\\theta_0)\\) converges distribution \\(\\chi^2_p\\), \\(\\chi^2_p\\) chi-square distribution \\(p\\) degrees freedom. See references details.","code":""},{"path":"https://markean.github.io/melt/reference/EL-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"EL class — EL-class","text":"optim list following optimization results: par numeric vector specified parameters. lambda numeric vector Lagrange multipliers. iterations single integer number iterations performed. convergence single logical convergence status. logp numeric vector log probabilities obtained empirical likelihood. logl single numeric empirical log-likelihood. loglr single numeric empirical log-likelihood ratio. statistic single numeric minus twice empirical log-likelihood ratio statistic asymptotic chi-square distribution. df single integer degrees freedom statistic. pval single numeric \\(p\\)-value statistic. npar single integer number parameters. weights numeric vector re-scaled weights used model fitting. coefficients numeric vector maximum empirical likelihood estimates parameters. method single character method dispatch internal functions. data numeric matrix data used model fitting.","code":""},{"path":"https://markean.github.io/melt/reference/EL-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EL class — EL-class","text":"Owen (2001). Empirical Likelihood. Chapman & Hall/CRC. doi:10.1201/9781420036152 . Qin J, Lawless J (1994). “Empirical Likelihood General Estimating Equations.” Annals Statistics, 22(1), 300--325. doi:10.1214/aos/1176325370 .","code":""},{"path":"https://markean.github.io/melt/reference/EL-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EL class — EL-class","text":"","code":"showClass(\"EL\") #> Class \"EL\" [package \"melt\"] #>  #> Slots: #>                                                                         #> Name:         optim         logp         logl        loglr    statistic #> Class:         list      numeric      numeric      numeric      numeric #>                                                                         #> Name:            df         pval         nobs         npar      weights #> Class:      integer      numeric      integer      integer      numeric #>                                               #> Name:  coefficients       method         data #> Class:      numeric    character          ANY #>  #> Known Subclasses:  #> Class \"CEL\", directly #> Class \"SD\", directly #> Class \"LM\", by class \"CEL\", distance 2 #> Class \"GLM\", by class \"CEL\", distance 3 #> Class \"QGLM\", by class \"GLM\", distance 4"},{"path":"https://markean.github.io/melt/reference/ELD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ELD class — ELD-class","title":"ELD class — ELD-class","text":"S4 class empirical likelihood displacement.","code":""},{"path":"https://markean.github.io/melt/reference/ELD-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ELD class — ELD-class","text":"","code":"showClass(\"ELD\") #> Class \"ELD\" [package \"melt\"] #>  #> Slots: #>                #> Name:    .Data #> Class: numeric #>  #> Extends:  #> Class \"numeric\", from data part #> Class \"vector\", by class \"numeric\", distance 2"},{"path":"https://markean.github.io/melt/reference/ELMT-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ELMT class — ELMT-class","title":"ELMT class — ELMT-class","text":"S4 class empirical likelihood multiple tests.","code":""},{"path":"https://markean.github.io/melt/reference/ELMT-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ELMT class — ELMT-class","text":"alpha single numeric overall significance level. coefficients list numeric vectors estimates linear hypotheses. statistic numeric vector minus twice (constrained) empirical log-likelihood ratios. df integer vector marginal degrees freedoms statistic. cv single numeric multiplicity adjusted critical value. pval numeric vector multiplicity adjusted \\(p\\)-values. calibrate single character calibration method used.","code":""},{"path":"https://markean.github.io/melt/reference/ELMT-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ELMT class — ELMT-class","text":"","code":"showClass(\"ELMT\") #> Class \"ELMT\" [package \"melt\"] #>  #> Slots: #>                                                                         #> Name:         alpha coefficients    statistic           df           cv #> Class:      numeric         list      numeric      integer      numeric #>                                  #> Name:          pval    calibrate #> Class:      numeric    character"},{"path":"https://markean.github.io/melt/reference/ELT-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ELT class — ELT-class","title":"ELT class — ELT-class","text":"S4 class empirical likelihood test.","code":""},{"path":"https://markean.github.io/melt/reference/ELT-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ELT class — ELT-class","text":"optim list optimization results. alpha single numeric significance level. logl single numeric (constrained) empirical log-likelihood. loglr single numeric (constrained) empirical log-likelihood ratio. statistic single numeric minus twice (constrained) empirical log-likelihood ratio. cv single numeric critical value. pval single numeric \\(p\\)-value statistic. rhs numeric vector right-hand side hypothesis. lhs numeric matrix left-hand side hypothesis. calibrate single character calibration method used.","code":""},{"path":"https://markean.github.io/melt/reference/ELT-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ELT class — ELT-class","text":"","code":"showClass(\"ELT\") #> Class \"ELT\" [package \"melt\"] #>  #> Slots: #>                                                                              #> Name:      optim     alpha      logl     loglr statistic        cv      pval #> Class:      list   numeric   numeric   numeric   numeric   numeric   numeric #>                                      #> Name:        rhs       lhs calibrate #> Class:   numeric    matrix character"},{"path":"https://markean.github.io/melt/reference/GLM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"GLM class — GLM-class","title":"GLM class — GLM-class","text":"S4 class generalized linear models. inherits LM class.","code":""},{"path":"https://markean.github.io/melt/reference/GLM-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"GLM class — GLM-class","text":"family family object used. dispersion single numeric estimated dispersion parameter.","code":""},{"path":"https://markean.github.io/melt/reference/GLM-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GLM class — GLM-class","text":"","code":"showClass(\"GLM\") #> Class \"GLM\" [package \"melt\"] #>  #> Slots: #>                                                                         #> Name:        family   dispersion     sigTests         call        terms #> Class:       family      numeric          ANY         call        terms #>                                                                         #> Name:          misc        optim         logp         logl        loglr #> Class:         list         list      numeric      numeric      numeric #>                                                                         #> Name:     statistic           df         pval         nobs         npar #> Class:      numeric      integer      numeric      integer      integer #>                                                            #> Name:       weights coefficients       method         data #> Class:      numeric      numeric    character          ANY #>  #> Extends:  #> Class \"LM\", directly #> Class \"CEL\", by class \"LM\", distance 2 #> Class \"EL\", by class \"LM\", distance 3 #>  #> Known Subclasses: \"QGLM\""},{"path":"https://markean.github.io/melt/reference/LM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LM class — LM-class","title":"LM class — LM-class","text":"S4 class linear models empirical likelihood. inherits CEL class.","code":""},{"path":"https://markean.github.io/melt/reference/LM-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LM class — LM-class","text":"intercept model, optim slot need understood terms EL class since constrained optimization involved overall test.","code":""},{"path":"https://markean.github.io/melt/reference/LM-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"LM class — LM-class","text":"formula(LM): Extracts symbolic model formula used el_lm() el_glm().","code":""},{"path":"https://markean.github.io/melt/reference/LM-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LM class — LM-class","text":"sigTests list results significance tests. call matched call. terms terms object used. misc list miscellaneous outputs model fitting function. used generics methods.","code":""},{"path":"https://markean.github.io/melt/reference/LM-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LM class — LM-class","text":"","code":"showClass(\"LM\") #> Class \"LM\" [package \"melt\"] #>  #> Slots: #>                                                                         #> Name:      sigTests         call        terms         misc        optim #> Class:          ANY         call        terms         list         list #>                                                                         #> Name:          logp         logl        loglr    statistic           df #> Class:      numeric      numeric      numeric      numeric      integer #>                                                                         #> Name:          pval         nobs         npar      weights coefficients #> Class:      numeric      integer      integer      numeric      numeric #>                                  #> Name:        method         data #> Class:    character          ANY #>  #> Extends:  #> Class \"CEL\", directly #> Class \"EL\", by class \"CEL\", distance 2 #>  #> Known Subclasses:  #> Class \"GLM\", directly #> Class \"QGLM\", by class \"GLM\", distance 2"},{"path":"https://markean.github.io/melt/reference/QGLM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"QGLM class — QGLM-class","title":"QGLM class — QGLM-class","text":"S4 class generalized linear models quasi-likelihood methods. inherits GLM class.","code":""},{"path":"https://markean.github.io/melt/reference/QGLM-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QGLM class — QGLM-class","text":"","code":"showClass(\"QGLM\") #> Class \"QGLM\" [package \"melt\"] #>  #> Slots: #>                                                                         #> Name:        family   dispersion     sigTests         call        terms #> Class:       family      numeric          ANY         call        terms #>                                                                         #> Name:          misc        optim         logp         logl        loglr #> Class:         list         list      numeric      numeric      numeric #>                                                                         #> Name:     statistic           df         pval         nobs         npar #> Class:      numeric      integer      numeric      integer      integer #>                                                            #> Name:       weights coefficients       method         data #> Class:      numeric      numeric    character          ANY #>  #> Extends:  #> Class \"GLM\", directly #> Class \"LM\", by class \"GLM\", distance 2 #> Class \"CEL\", by class \"GLM\", distance 3 #> Class \"EL\", by class \"GLM\", distance 4"},{"path":"https://markean.github.io/melt/reference/SD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SD class — SD-class","title":"SD class — SD-class","text":"S4 class standard deviation. inherits EL class.","code":""},{"path":"https://markean.github.io/melt/reference/SD-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SD class — SD-class","text":"","code":"showClass(\"SD\") #> Class \"SD\" [package \"melt\"] #>  #> Slots: #>                                                                         #> Name:         optim         logp         logl        loglr    statistic #> Class:         list      numeric      numeric      numeric      numeric #>                                                                         #> Name:            df         pval         nobs         npar      weights #> Class:      integer      numeric      integer      integer      numeric #>                                               #> Name:  coefficients       method         data #> Class:      numeric    character          ANY #>  #> Extends: \"EL\""},{"path":"https://markean.github.io/melt/reference/SummaryGLM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SummaryGLM class — SummaryGLM-class","title":"SummaryGLM class — SummaryGLM-class","text":"S4 class summary GLM objects. inherits SummaryLM class.","code":""},{"path":"https://markean.github.io/melt/reference/SummaryGLM-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SummaryGLM class — SummaryGLM-class","text":"family family object used. dispersion single numeric estimated dispersion parameter.","code":""},{"path":"https://markean.github.io/melt/reference/SummaryGLM-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SummaryGLM class — SummaryGLM-class","text":"","code":"showClass(\"SummaryGLM\") #> Class \"SummaryGLM\" [package \"melt\"] #>  #> Slots: #>                                                                                #> Name:       family  dispersion   statistic          df convergence    sigTests #> Class:      family     numeric     numeric     integer     logical      matrix #>                                                                                #> Name:     weighted   intercept   na.action        call       terms     aliased #> Class:     logical     logical         ANY        call       terms     logical #>  #> Extends: \"SummaryLM\" #>  #> Known Subclasses: \"SummaryQGLM\""},{"path":"https://markean.github.io/melt/reference/SummaryLM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SummaryLM class — SummaryLM-class","title":"SummaryLM class — SummaryLM-class","text":"S4 class summary LM objects.","code":""},{"path":"https://markean.github.io/melt/reference/SummaryLM-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SummaryLM class — SummaryLM-class","text":"statistic single numeric minus twice empirical log-likelihood ratio overall test model. df single integer degrees freedom statistic. convergence single logical convergence status constrained minimization. sigTests numeric matrix results significance tests. weighted single logical whether given model weighted . na.action Information returned model.frame special handling NAs. call matched call. terms terms object used. aliased named logical vector showing original coefficients aliased.","code":""},{"path":"https://markean.github.io/melt/reference/SummaryLM-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SummaryLM class — SummaryLM-class","text":"","code":"showClass(\"SummaryLM\") #> Class \"SummaryLM\" [package \"melt\"] #>  #> Slots: #>                                                                                #> Name:    statistic          df convergence    sigTests    weighted   intercept #> Class:     numeric     integer     logical      matrix     logical     logical #>                                                        #> Name:    na.action        call       terms     aliased #> Class:         ANY        call       terms     logical #>  #> Known Subclasses:  #> Class \"SummaryGLM\", directly #> Class \"SummaryQGLM\", by class \"SummaryGLM\", distance 2"},{"path":"https://markean.github.io/melt/reference/SummaryQGLM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SummaryQGLM class — SummaryQGLM-class","title":"SummaryQGLM class — SummaryQGLM-class","text":"S4 class summary QGLM objects. inherits SummaryGLM class.","code":""},{"path":"https://markean.github.io/melt/reference/SummaryQGLM-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SummaryQGLM class — SummaryQGLM-class","text":"","code":"showClass(\"SummaryQGLM\") #> Class \"SummaryQGLM\" [package \"melt\"] #>  #> Slots: #>                                                                                #> Name:       family  dispersion   statistic          df convergence    sigTests #> Class:      family     numeric     numeric     integer     logical      matrix #>                                                                                #> Name:     weighted   intercept   na.action        call       terms     aliased #> Class:     logical     logical         ANY        call       terms     logical #>  #> Extends:  #> Class \"SummaryGLM\", directly #> Class \"SummaryLM\", by class \"SummaryGLM\", distance 2"},{"path":"https://markean.github.io/melt/reference/chisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-square statistic — chisq","title":"Chi-square statistic — chisq","text":"Extracts chi-square statistic model.","code":""},{"path":"https://markean.github.io/melt/reference/chisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-square statistic — chisq","text":"","code":"# S4 method for EL chisq(object, ...)  # S4 method for ELT chisq(object, ...)  # S4 method for ELMT chisq(object, ...)  # S4 method for SummaryLM chisq(object, ...)"},{"path":"https://markean.github.io/melt/reference/chisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-square statistic — chisq","text":"object object inherits EL, ELT, ELMT, SummaryLM. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/chisq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-square statistic — chisq","text":"form value returned chisq() depends class argument.","code":""},{"path":"https://markean.github.io/melt/reference/chisq.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Chi-square statistic — chisq","text":"chisq(EL): Extracts chi-square statistic. chisq(ELT): Extracts chi-square statistic. chisq(ELMT): Extracts vector chi-square statistics. chisq(SummaryLM): Extracts chi-square statistic overall test model.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/chisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chi-square statistic — chisq","text":"","code":"data(\"precip\") fit <- el_mean(precip, par = 40) chisq(fit) #> [1] 9.957478"},{"path":"https://markean.github.io/melt/reference/clothianidin.html","id":null,"dir":"Reference","previous_headings":"","what":"Clothianidin concentration in maize plants — clothianidin","title":"Clothianidin concentration in maize plants — clothianidin","text":"dataset summarizing field experiments result seed treatments clothianidin concentration.","code":""},{"path":"https://markean.github.io/melt/reference/clothianidin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clothianidin concentration in maize plants — clothianidin","text":"","code":"data(\"clothianidin\")"},{"path":"https://markean.github.io/melt/reference/clothianidin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clothianidin concentration in maize plants — clothianidin","text":"data frame 102 observations 3 variables: blk New blocks constructed original data. format 'days post planting_original block_year'. trt Seed treatment. clo Log transformed clothianidin concentration (µg).","code":""},{"path":"https://markean.github.io/melt/reference/clothianidin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clothianidin concentration in maize plants — clothianidin","text":"Alford , Krupke CH (2017). “Translocation Neonicotinoid Seed Treatment Clothianidin Maize.” PLOS ONE, 12(3), 1--19. doi:10.1371/journal.pone.0173836 .","code":""},{"path":"https://markean.github.io/melt/reference/clothianidin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clothianidin concentration in maize plants — clothianidin","text":"original data provided Alford Krupke (2017). shoot region observations taken original data processed illustration.","code":""},{"path":"https://markean.github.io/melt/reference/clothianidin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clothianidin concentration in maize plants — clothianidin","text":"","code":"data(\"clothianidin\") clothianidin #>         blk       trt          clo #> 1   05_1_15 Fungicide  0.683358043 #> 2   06_1_14 Fungicide -1.343711663 #> 3   06_1_14      High  4.160300828 #> 4   06_3_14     Naked -1.266373694 #> 5   06_3_14 Fungicide  0.266203041 #> 6   06_4_14 Fungicide  0.082056593 #> 7   06_4_14      High  2.863378490 #> 8   09_1_15 Fungicide  1.288084147 #> 9   14_1_15     Naked -3.210700261 #> 10  14_1_15       Low -0.560228996 #> 11  14_3_15 Fungicide -1.867225950 #> 12  14_3_15      High  1.612473146 #> 13  14_4_15       Low  0.534477123 #> 14  16_1_15     Naked -5.184915659 #> 15  16_1_15 Fungicide -2.010318248 #> 16  16_1_15       Low  0.088207528 #> 17  16_1_15      High  1.713161913 #> 18  16_2_15     Naked -2.846879759 #> 19  16_2_15 Fungicide -2.718947107 #> 20  16_2_15       Low  0.215424056 #> 21  16_2_15      High  2.451993796 #> 22  16_3_15     Naked -3.531220341 #> 23  16_3_15 Fungicide -3.148843182 #> 24  16_3_15       Low -0.261376556 #> 25  16_3_15      High  1.586224634 #> 26  16_4_15     Naked -3.622925062 #> 27  16_4_15 Fungicide -2.483104017 #> 28  16_4_15       Low  0.003110452 #> 29  16_4_15      High  1.293410198 #> 30  19_1_15     Naked -3.939436661 #> 31  19_1_15 Fungicide -2.765904787 #> 32  19_1_15       Low -1.119407219 #> 33  19_1_15      High  1.526810884 #> 34  19_2_15     Naked -3.981492598 #> 35  19_2_15 Fungicide -3.317277042 #> 36  19_2_15       Low -1.140167204 #> 37  19_2_15      High  0.705647391 #> 38  19_3_15 Fungicide -3.188437821 #> 39  19_3_15       Low -1.207272248 #> 40  19_3_15      High  1.311046037 #> 41  19_4_15     Naked -3.723697545 #> 42  19_4_15 Fungicide -2.226847059 #> 43  19_4_15       Low -0.217086785 #> 44  19_4_15      High  0.333726798 #> 45  20_1_14     Naked -3.864591430 #> 46  20_1_14 Fungicide -4.515366320 #> 47  20_2_14     Naked -4.008676782 #> 48  20_2_14       Low -2.422512504 #> 49  20_2_14      High  1.667412263 #> 50  20_3_14 Fungicide -4.829713464 #> 51  20_3_14       Low -1.666673475 #> 52  20_3_14      High -0.281333426 #> 53  20_4_14 Fungicide -4.275357576 #> 54  20_4_14      High -0.605320236 #> 55  34_1_14     Naked -6.918566510 #> 56  34_1_14 Fungicide -5.560681591 #> 57  34_1_14       Low -6.020845161 #> 58  34_1_14      High -4.341585666 #> 59  34_2_14     Naked -4.570684029 #> 60  34_2_14 Fungicide -5.894837780 #> 61  34_2_14       Low -5.158555424 #> 62  34_2_14      High -5.772264441 #> 63  34_3_14     Naked -6.185233294 #> 64  34_3_14 Fungicide -6.035916455 #> 65  34_3_14       Low -5.840233669 #> 66  34_3_14      High -2.629107001 #> 67  34_4_14     Naked -6.660058832 #> 68  34_4_14 Fungicide -4.674579644 #> 69  34_4_14       Low -4.199705078 #> 70  34_4_14      High -4.810683566 #> 71  47_1_15     Naked -4.925091754 #> 72  47_1_15 Fungicide -5.365736825 #> 73  47_1_15       Low -4.706559761 #> 74  47_1_15      High -4.086746645 #> 75  47_2_15     Naked -5.371571727 #> 76  47_2_15 Fungicide -5.502139716 #> 77  47_2_15       Low -3.894777436 #> 78  47_2_15      High -4.723718957 #> 79  47_3_15     Naked -5.761104612 #> 80  47_3_15 Fungicide -4.302901382 #> 81  47_3_15       Low -5.270795002 #> 82  47_3_15      High -3.939092302 #> 83  47_4_15     Naked -4.101298822 #> 84  47_4_15 Fungicide -4.962184789 #> 85  47_4_15       Low -4.375258048 #> 86  47_4_15      High -3.997383917 #> 87  61_1_15     Naked -4.717642389 #> 88  61_1_15 Fungicide -5.403566637 #> 89  61_1_15       Low -5.310987880 #> 90  61_1_15      High -5.622689967 #> 91  61_2_15     Naked -5.707058650 #> 92  61_2_15 Fungicide -5.210762344 #> 93  61_2_15       Low -5.262075663 #> 94  61_2_15      High -5.325407079 #> 95  61_3_15     Naked -4.893831729 #> 96  61_3_15 Fungicide -5.086644868 #> 97  61_3_15       Low -5.230318367 #> 98  61_3_15      High -3.711771239 #> 99  61_4_15     Naked -4.025933828 #> 100 61_4_15 Fungicide -5.000619872 #> 101 61_4_15       Low -4.169193748 #> 102 61_4_15      High -5.348263289"},{"path":"https://markean.github.io/melt/reference/coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Model coefficients — coef","title":"Model coefficients — coef","text":"Extracts maximum empirical likelihood estimates model.","code":""},{"path":"https://markean.github.io/melt/reference/coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model coefficients — coef","text":"","code":"# S4 method for EL coef(object, ...)  # S4 method for ELMT coef(object, ...)"},{"path":"https://markean.github.io/melt/reference/coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model coefficients — coef","text":"object object inherits EL ELMT, including CEL, LM, GLM. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model coefficients — coef","text":"form value returned coef() depends class argument.","code":""},{"path":"https://markean.github.io/melt/reference/coef.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Model coefficients — coef","text":"coef(EL): Extracts numeric vector maximum empirical likelihood estimates. coef(ELMT): Extracts list numeric vectors maximum empirical likelihood estimates. element list corresponds distinct hypothesis.","code":""},{"path":"https://markean.github.io/melt/reference/coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model coefficients — coef","text":"","code":"data(\"mtcars\") fit <- el_lm(mpg ~ wt, data = mtcars) coef(fit) #> (Intercept)          wt  #>   37.285126   -5.344472"},{"path":"https://markean.github.io/melt/reference/confint.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence interval for model parameters — confint","title":"Confidence interval for model parameters — confint","text":"Computes confidence intervals one parameters model.","code":""},{"path":"https://markean.github.io/melt/reference/confint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence interval for model parameters — confint","text":"","code":"# S4 method for EL confint(object, parm, level = 0.95, cv = NULL, control = el_control())"},{"path":"https://markean.github.io/melt/reference/confint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence interval for model parameters — confint","text":"object object inherits EL, including CEL, LM, GLM. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level single numeric confidence level required. Defaults 0.95. cv single numeric critical value calibration empirical likelihood ratio statistic. Defaults NULL set qchisq(level, 1L). non-NULL, level ignored. control object class ControlEL constructed el_control().","code":""},{"path":"https://markean.github.io/melt/reference/confint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence interval for model parameters — confint","text":"matrix columns giving lower upper confidence limits parameter. contrast methods rely studentization, lower upper limits obtained empirical likelihood correspond (1 - level) / 2 1 - (1 - level) / 2 %, respectively.","code":""},{"path":"https://markean.github.io/melt/reference/confint.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confidence interval for model parameters — confint","text":"Owen (1990). “Empirical Likelihood Ratio Confidence Regions.” Annals Statistics, 18(1), 90--120. doi:10.1214/aos/1176347494 .","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/confint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence interval for model parameters — confint","text":"","code":"data(\"mtcars\") fit <- el_lm(mpg ~ ., data = mtcars) confint(fit, parm = c(2, 3)) #>             lower     upper #> cyl  -0.426725127 0.3802687 #> disp  0.006409155 0.0218920"},{"path":"https://markean.github.io/melt/reference/confreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence region for model parameters — confreg","title":"Confidence region for model parameters — confreg","text":"Computes boundary points two-dimensional confidence region model parameters.","code":""},{"path":"https://markean.github.io/melt/reference/confreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence region for model parameters — confreg","text":"","code":"# S4 method for EL confreg(   object,   parm,   level = 0.95,   cv = NULL,   npoints = 50L,   control = el_control() )"},{"path":"https://markean.github.io/melt/reference/confreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence region for model parameters — confreg","text":"object object inherits EL, including CEL, LM, GLM. parm specification parameters given confidence region, either vector numbers vector names. vector length two form c(x, y). missing, first two parameter object considered. level single numeric confidence level required. Defaults 0.95. ignored cv non-NULL. cv single numeric critical value calibration empirical likelihood ratio statistic. Defaults NULL set qchisq(level, 2L). must compatible th value control. npoints single integer number boundary points compute. Defaults 50. control object class ControlEL constructed el_control().","code":""},{"path":"https://markean.github.io/melt/reference/confreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence region for model parameters — confreg","text":"object class ConfregEL.","code":""},{"path":"https://markean.github.io/melt/reference/confreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confidence region for model parameters — confreg","text":"Owen (1990). “Empirical Likelihood Ratio Confidence Regions.” Annals Statistics, 18(1), 90--120. doi:10.1214/aos/1176347494 .","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/confreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence region for model parameters — confreg","text":"","code":"data(\"mtcars\") fit <- el_lm(mpg ~ wt + qsec, data = mtcars) cr <- confreg(fit, parm = c(2, 3), cv = qchisq(0.90, 2)) plot(cr)"},{"path":"https://markean.github.io/melt/reference/conv.html","id":null,"dir":"Reference","previous_headings":"","what":"Convergence check — conv","title":"Convergence check — conv","text":"Extracts convergence status model.","code":""},{"path":"https://markean.github.io/melt/reference/conv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convergence check — conv","text":"","code":"# S4 method for EL conv(object, ...)  # S4 method for CEL conv(object, ...)  # S4 method for SummaryLM conv(object, ...)  # S4 method for ELT conv(object, ...)"},{"path":"https://markean.github.io/melt/reference/conv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convergence check — conv","text":"object object inherits EL, including CEL, LM, GLM. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/conv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convergence check — conv","text":"single logical.","code":""},{"path":"https://markean.github.io/melt/reference/conv.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Convergence check — conv","text":"conv(EL): Extracts convergence status model respect Lagrange multiplier. conv(CEL): Extracts convergence status model respect parameter. conv(SummaryLM): Extracts convergence status model. See documentation EL CEL. conv(ELT): Extracts convergence status model respect parameter (Lagrange multiplier lhs NULL).","code":""},{"path":"https://markean.github.io/melt/reference/conv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convergence check — conv","text":"","code":"## Convergence check for the overall model test data(\"mtcars\") fit <- el_lm(mpg ~ ., data = mtcars) conv(fit) #> [1] TRUE"},{"path":"https://markean.github.io/melt/reference/critVal.html","id":null,"dir":"Reference","previous_headings":"","what":"Critical value — critVal","title":"Critical value — critVal","text":"Extracts critical value model.","code":""},{"path":"https://markean.github.io/melt/reference/critVal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Critical value — critVal","text":"","code":"# S4 method for ELT critVal(object, ...)  # S4 method for ELMT critVal(object, ...)"},{"path":"https://markean.github.io/melt/reference/critVal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Critical value — critVal","text":"object object inherits ELT ELMT. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/critVal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Critical value — critVal","text":"single numeric.","code":""},{"path":"https://markean.github.io/melt/reference/critVal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Critical value — critVal","text":"","code":"## F-calibrated critical value set.seed(533414) x <- rnorm(100) fit <- el_mean(x, 0) elt <- elt(fit, rhs = 0.3, calibrate = \"f\") critVal(elt) #> [1] 3.937117"},{"path":"https://markean.github.io/melt/reference/el_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Control parameters for computation — el_control","title":"Control parameters for computation — el_control","text":"Specifies computational details (constrained) empirical likelihood.","code":""},{"path":"https://markean.github.io/melt/reference/el_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control parameters for computation — el_control","text":"","code":"el_control(   maxit = 200L,   maxit_l = 25L,   tol = 1e-06,   tol_l = 1e-06,   step = NULL,   th = NULL,   verbose = FALSE,   keep_data = TRUE,   nthreads,   seed = sample.int(.Machine$integer.max, 1L),   b = 10000L,   m = 1000000L )"},{"path":"https://markean.github.io/melt/reference/el_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control parameters for computation — el_control","text":"maxit single integer maximum number iterations constrained minimization empirical likelihood. Defaults 200. maxit_l single integer maximum number iterations evaluation empirical likelihood. Defaults 25. tol single numeric convergence tolerance constrained minimization. Defaults 1e-06. tol_l single numeric relative convergence tolerance evaluation. Defaults 1e-06. step single numeric step size projected gradient descent method. Defaults NULL set reciprocal sample size. th single numeric threshold negative empirical log-likelihood ratio. iteration stops value exceeds threshold. Defaults NULL sets threshold 200 * d, d corresponds degrees freedom limiting chi-squared distribution statistic. verbose single logical. TRUE, message convergence status printed fitting objects inherit class EL. Defaults FALSE. keep_data single logical. TRUE, data used fitting objects inherit class EL stored later use methods. Defaults TRUE. nthreads single integer number threads parallel computation via OpenMP (available). Defaults half available threads. better performance, generally recommended platforms limit number threads number physical cores. Note applies following functions involve multiple evaluations optimizations: confint(), confreg(), el_lm(), el_glm(), eld(), elt(). seed single integer seed random number generation. applies elt() calibrate set \"boot\". Defaults random integer generated 1 maximum integer supported R machine, determined set.seed(). one seed needed even multiple threads used nthreads. thread given separate seed produce non-overlapping reproducible sequence random numbers. Xoshiro256+ pseudo-random number generator used internally work OpenMP. b single integer number bootstrap replicates. applies elt() calibrate set \"boot\". Defaults 10000. m single integer number Monte Carlo samples. applies elmt(). Defaults 1e+06.","code":""},{"path":"https://markean.github.io/melt/reference/el_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control parameters for computation — el_control","text":"object class ControlEL.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/el_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control parameters for computation — el_control","text":"","code":"optcfg <- el_control(maxit = 300, step = 0.01, th = 200, nthreads = 1)"},{"path":"https://markean.github.io/melt/reference/el_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical likelihood for general estimating functions — el_eval","title":"Empirical likelihood for general estimating functions — el_eval","text":"Computes empirical likelihood general estimating functions.","code":""},{"path":"https://markean.github.io/melt/reference/el_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical likelihood for general estimating functions — el_eval","text":"","code":"el_eval(g, weights = NULL, control = el_control())"},{"path":"https://markean.github.io/melt/reference/el_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical likelihood for general estimating functions — el_eval","text":"g numeric matrix, object can coerced numeric matrix. row corresponds observation estimating function. number rows must greater number columns. weights optional numeric vector weights used fitting process. length vector must number rows g. Defaults NULL, corresponding identical weights. non-NULL, weighted empirical likelihood computed. control object class ControlEL constructed el_control().","code":""},{"path":"https://markean.github.io/melt/reference/el_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical likelihood for general estimating functions — el_eval","text":"list following components: optim list following optimization results: lambda Lagrange multiplier dual problem. iterations Number iterations performed. convergence Convergence status. logp Log probabilities obtained empirical likelihood. logl Empirical log-likelihood. loglr Empirical log-likelihood ratio. statistic Minus twice empirical log-likelihood ratio statistic asymptotic chi-square distribution. df Degrees freedom statistic. pval \\(p\\)-value statistic. npar Number parameters. weights Re-scaled weights used model fitting.","code":""},{"path":"https://markean.github.io/melt/reference/el_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical likelihood for general estimating functions — el_eval","text":"Let \\(X_i\\) independent identically distributed \\(p\\)-dimensional random variable unknown distribution \\(P\\) \\(= 1, \\dots, n\\). assume \\(P\\) positive definite covariance matrix. parameter interest \\(\\theta(F) \\{\\rm{\\!R}}^p\\), consider \\(p\\)-dimensional smooth estimating function \\(g(X_i, \\theta)\\) moment condition $$\\textrm{E}[g(X_i, \\theta)] = 0.$$ assume exists unique \\(\\theta_0\\) solves equation. Given value \\(\\theta\\), (profile) empirical likelihood ratio defined $$R(\\theta) =   \\max_{p_i}\\left\\{\\prod_{= 1}^n np_i :   \\sum_{= 1}^n p_i g(X_i, \\theta) = 0, p_i \\geq 0, \\sum_{= 1}^n p_i = 1   \\right\\}.$$ el_mean() computes empirical log-likelihood ratio statistic \\(-2\\log R(\\theta)\\) \\(n\\) \\(p\\) numeric matrix g, whose \\(\\)th row \\(g(X_i, \\theta)\\). Since estimating function can arbitrary, el_eval() return object class EL, associated generics methods applicable.","code":""},{"path":"https://markean.github.io/melt/reference/el_eval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical likelihood for general estimating functions — el_eval","text":"Qin J, Lawless J (1994). “Empirical Likelihood General Estimating Equations.” Annals Statistics, 22(1), 300--325. doi:10.1214/aos/1176325370 .","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/el_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical likelihood for general estimating functions — el_eval","text":"","code":"set.seed(123526) mu <- 0 sigma <- 1 x <- rnorm(100) g <- matrix(c(x - mu, (x - mu)^2 - sigma^2), ncol = 2) el_eval(g, weights = rep(c(1, 2), each = 50)) #> $optim #> $optim$lambda #> [1]  0.07496852 -0.13181246 #>  #> $optim$iterations #> [1] 5 #>  #> $optim$convergence #> [1] TRUE #>  #>  #> $logp #>   [1] -4.769471 -4.990644 -4.870218 -5.091557 -5.100253 -4.930272 -5.062251 #>   [8] -4.776230 -4.686532 -5.140843 -5.128973 -5.142095 -5.113834 -4.725774 #>  [15] -5.036367 -5.067660 -5.067015 -5.119565 -5.093684 -5.098870 -4.875005 #>  [22] -5.078325 -5.023702 -5.131392 -5.090640 -5.123581 -5.084509 -5.124924 #>  [29] -5.126164 -5.116142 -4.858517 -4.609268 -4.397857 -5.128368 -5.085189 #>  [36] -5.028656 -4.858664 -5.096852 -5.133205 -4.281854 -5.140959 -4.618976 #>  [43] -5.024714 -5.101541 -4.946874 -5.143709 -5.063363 -5.131133 -5.118396 #>  [50] -5.114350 -4.450663 -4.389785 -3.925409 -4.416857 -4.447601 -4.371702 #>  [57] -4.442178 -4.450460 -4.438083 -4.379111 -4.449239 -4.105659 -4.330148 #>  [64] -4.447834 -4.438277 -4.235448 -4.383028 -4.312055 -4.180299 -4.417466 #>  [71] -4.432212 -4.396910 -4.081117 -4.330231 -4.394711 -4.127873 -4.432886 #>  [78] -4.433487 -4.258212 -4.363482 -4.236043 -4.426048 -4.434566 -4.422859 #>  [85] -4.415198 -4.302786 -3.988760 -4.300249 -4.429157 -4.320378 -4.330964 #>  [92] -4.447207 -4.435400 -4.448065 -4.450586 -4.450673 -4.437071 -4.429319 #>  [99] -4.423978 -3.975990 #>  #> $logl #> [1] -456.2696 #>  #> $loglr #> [1] -1.415871 #>  #> $statistic #> [1] 2.831742 #>  #> $df #> [1] 2 #>  #> $pval #> [1] 0.2427141 #>  #> $nobs #> [1] 100 #>  #> $npar #> [1] 2 #>  #> $weights #>   [1] 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 #>   [8] 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 #>  [15] 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 #>  [22] 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 #>  [29] 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 #>  [36] 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 #>  [43] 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 #>  [50] 0.6666667 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 #>  [57] 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 #>  [64] 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 #>  [71] 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 #>  [78] 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 #>  [85] 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 #>  [92] 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 1.3333333 #>  [99] 1.3333333 1.3333333 #>"},{"path":"https://markean.github.io/melt/reference/el_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical likelihood for generalized linear models — el_glm","title":"Empirical likelihood for generalized linear models — el_glm","text":"Fits generalized linear model empirical likelihood.","code":""},{"path":"https://markean.github.io/melt/reference/el_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical likelihood for generalized linear models — el_glm","text":"","code":"el_glm(   formula,   family = gaussian,   data,   weights = NULL,   na.action,   start = NULL,   etastart = NULL,   mustart = NULL,   offset,   control = el_control(),   ... )"},{"path":"https://markean.github.io/melt/reference/el_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical likelihood for generalized linear models — el_glm","text":"formula object class formula (one can coerced class): symbolic description model fitted. family description error distribution link function used model. result call family function supported. See ‘Details’. data optional data frame, list environment (object coercible .data.frame() data frame) containing variables formula. found data, variables taken environment(formula). weights optional numeric vector weights used fitting process. Defaults NULL, corresponding identical weights. non-NULL, weighted empirical likelihood computed. na.action function indicates happen data contain NAs. default set na.action setting options, na.fail unset. start Starting values parameters linear predictor. Defaults NULL passed glm.fit(). etastart Starting values linear predictor. Defaults NULL passed glm.fit(). mustart Starting values vector means. Defaults NULL passed glm.fit(). offset optional expression specifying priori known component included linear predictor fitting. NULL numeric vector matrix extents matching response. One offset terms can included formula instead well, one specified sum used. control object class ControlEL constructed el_control(). ... Additional arguments passed glm.control().","code":""},{"path":"https://markean.github.io/melt/reference/el_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical likelihood for generalized linear models — el_glm","text":"object class GLM.","code":""},{"path":"https://markean.github.io/melt/reference/el_glm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical likelihood for generalized linear models — el_glm","text":"Suppose observe \\(n\\) independent random variables \\({Z_i} \\equiv {(X_i, Y_i)}\\) common distribution, \\(X_i\\) \\(p\\)-dimensional covariate (including intercept ) \\(Y_i\\) response. generalized linear model specifies \\({\\textrm{E}(Y_i | X_i)} = {\\mu_i}\\), \\({G(\\mu_i)} = {X_i^\\top \\theta}\\), \\({\\textrm{Var}(Y_i | X_i)} = {\\phi V(\\mu_i)}\\), \\(\\theta = (\\theta_0, \\dots, \\theta_{p-1})\\) unknown \\(p\\)-dimensional parameter, \\(\\phi\\) optional dispersion parameter, \\(G\\) known smooth link function, \\(V\\) known variance function. \\(H\\) denoting inverse link function, define quasi-score $${g_1(Z_i, \\theta)} =   \\left\\{   H^\\prime(X_i^\\top \\theta) \\left(Y_i - H(X_i^\\top \\theta)\\right) /   \\left(\\phi V\\left(H(X_i^\\top \\theta)\\right)\\right)   \\right\\}   X_i.$$ estimating equations \\(\\sum_{= 1}^n g_1(Z_i, \\theta) = 0\\). \\(\\phi\\) known, (profile) empirical likelihood ratio given \\(\\theta\\) defined $$R_1(\\theta) =   \\max_{p_i}\\left\\{\\prod_{= 1}^n np_i :   \\sum_{= 1}^n p_i g_1(Z_i, \\theta) = 0,\\   p_i \\geq 0,\\   \\sum_{= 1}^n p_i = 1   \\right\\}.$$ unknown \\(\\phi\\), introduce another estimating function based squared residuals. Let \\({\\eta} = {(\\theta, \\phi)}\\) $${g_2(Z_i, \\eta)} =   \\left(Y_i - H(X_i^\\top \\theta)\\right)^2 /   \\left(\\phi^2 V\\left(H(X_i^\\top \\theta)\\right)\\right) - 1 / \\phi.$$ Now empirical likelihood ratio defined $$R_2(\\eta) =   \\max_{p_i}\\left\\{\\prod_{= 1}^n np_i :   \\sum_{= 1}^n p_i g_1(Z_i, \\eta) = 0,\\   \\sum_{= 1}^n p_i g_2(Z_i, \\eta) = 0,\\   p_i \\geq 0,\\   \\sum_{= 1}^n p_i = 1   \\right\\}.$$ el_glm() first computes parameter estimates calling glm.fit() (... ) model.frame model.matrix obtained formula. Note maximum empirical likelihood estimator quasi-maximum likelihood estimator model. Next, tests hypotheses based asymptotic chi-square distributions empirical likelihood ratio statistics. Included tests overall test $$H_0: \\theta_1 = \\theta_2 = \\cdots = \\theta_{p-1} = 0,$$ significance tests parameter $$H_{0j}: \\theta_j = 0,\\ j = 0, \\dots, p-1.$$ test results returned optim sigTests, respectively. available families link functions follows: gaussian: \"identity\", \"log\", \"inverse\". bimomial: \"logit\", \"probit\", \"log\". poisson: \"log\", \"identity\", \"sqrt\". quasipoisson: \"log\" \"identity\".","code":""},{"path":"https://markean.github.io/melt/reference/el_glm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical likelihood for generalized linear models — el_glm","text":"Chen SX, Cui H (2003). “Extended Empirical Likelihood Generalized Linear Models.” Statistica Sinica, 13(1), 69--81. Kolaczyk ED (1994). “Empirical Likelihood Generalized Linear Models.” Statistica Sinica, 4(1), 199--218.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/el_glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical likelihood for generalized linear models — el_glm","text":"","code":"set.seed(20010) n <- 50 x <- rnorm(n) x2 <- rnorm(n) l <- -2 + 0.2 * x + 3 * x2 mu <- 1 / (1 + exp(-l)) y <- rbinom(n, 1, mu) df <- data.frame(y, x, x2) fit <- el_glm(y ~ x + x2,   family = binomial, data = df, weights = NULL, na.action = na.omit,   start = NULL, etastart = NULL, mustart = NULL, offset = NULL ) summary(fit) #>  #> Call: #> el_glm(formula = y ~ x + x2, family = binomial, data = df, weights = NULL,  #>     na.action = na.omit, start = NULL, etastart = NULL, mustart = NULL,  #>     offset = NULL) #>  #> Coefficients: #>             Estimate  Chisq Pr(>Chisq)     #> (Intercept)  -2.6113 48.612   3.12e-12 *** #> x             0.2929  0.729      0.393     #> x2            2.9006 41.051   1.48e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Dispersion for binomial family: 1 #>  #> Chisq: 45.02, df: 2, Pr(>Chisq): 1.676e-10 #>  #> Constrained EL: converged  #>"},{"path":"https://markean.github.io/melt/reference/el_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical likelihood for linear models — el_lm","title":"Empirical likelihood for linear models — el_lm","text":"Fits linear model empirical likelihood.","code":""},{"path":"https://markean.github.io/melt/reference/el_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical likelihood for linear models — el_lm","text":"","code":"el_lm(   formula,   data,   weights = NULL,   na.action,   offset,   control = el_control(),   ... )"},{"path":"https://markean.github.io/melt/reference/el_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical likelihood for linear models — el_lm","text":"formula object class formula (one can coerced class) symbolic description model fitted. data optional data frame, list environment (object coercible .data.frame() data frame) containing variables formula. found data, variables taken environment(formula). weights optional numeric vector weights used fitting process. Defaults NULL, corresponding identical weights. non-NULL, weighted empirical likelihood computed. na.action function indicates happen data contain NAs. default set na.action setting options, na.fail unset. offset optional expression specifying priori known component included linear predictor fitting. NULL numeric vector matrix extents matching response. One offset terms can included formula instead well, one specified sum used. control object class ControlEL constructed el_control(). ... Additional arguments passed low level regression fitting functions. See ‘Details’.","code":""},{"path":"https://markean.github.io/melt/reference/el_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical likelihood for linear models — el_lm","text":"object class LM.","code":""},{"path":"https://markean.github.io/melt/reference/el_lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical likelihood for linear models — el_lm","text":"Suppose observe \\(n\\) independent random variables \\({Z_i} \\equiv {(X_i, Y_i)}\\) common distribution, \\(X_i\\) \\(p\\)-dimensional covariate (including intercept ) \\(Y_i\\) response. consider following linear model: $$Y_i = X_i^\\top \\theta + \\epsilon_i,$$ \\(\\theta = (\\theta_0, \\dots, \\theta_{p-1})\\) unknown \\(p\\)-dimensional parameter errors \\(\\epsilon_i\\) independent random variables satisfy \\(\\textrm{E}(\\epsilon_i | X_i)\\) = 0. assume errors finite conditional variance. least square estimator \\(\\theta\\) solves following estimating equations: $$\\sum_{= 1}^n(Y_i - X_i^\\top \\theta)X_i = 0.$$ Given value \\(\\theta\\), let \\({g(Z_i, \\theta)} = {(Y_i - X_i^\\top \\theta)X_i}\\) (profile) empirical likelihood ratio defined $$R(\\theta) =   \\max_{p_i}\\left\\{\\prod_{= 1}^n np_i :   \\sum_{= 1}^n p_i g(Z_i, \\theta) = \\theta,\\    p_i \\geq 0,\\   \\sum_{= 1}^n p_i = 1   \\right\\}.$$ el_lm() first computes parameter estimates calling lm.fit() (... ) model.frame model.matrix obtained formula. Note maximum empirical likelihood estimator quasi-maximum likelihood estimator model. Next, tests hypotheses based asymptotic chi-square distributions empirical likelihood ratio statistics. Included tests overall test $$H_0: \\theta_1 = \\theta_2 = \\cdots = \\theta_{p-1} = 0,$$ significance tests parameter $$H_{0j}: \\theta_j = 0,\\ j = 0, \\dots, p-1.$$ test results returned optim sigTests, respectively.","code":""},{"path":"https://markean.github.io/melt/reference/el_lm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical likelihood for linear models — el_lm","text":"Owen (1991). “Empirical Likelihood Linear Models.” Annals Statistics, 19(4), 1725--1747. doi:10.1214/aos/1176348368 .","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/el_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical likelihood for linear models — el_lm","text":"","code":"## Linear regression data(\"thiamethoxam\") fit <- el_lm(fruit ~ trt, data = thiamethoxam) summary(fit) #>  #> Call: #> el_lm(formula = fruit ~ trt, data = thiamethoxam) #>  #> Coefficients: #>             Estimate   Chisq Pr(>Chisq)     #> (Intercept)   5.6667 440.823     <2e-16 *** #> trtSpray     -0.6310   0.481     0.4881     #> trtFurrow     2.7798   6.074     0.0137 *   #> trtSeed      -0.3452   0.129     0.7191     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> Chisq: 21.86, df: 3, Pr(>Chisq): 6.964e-05 #>  #> Constrained EL: converged  #>   ## Weighted data wfit <- el_lm(fruit ~ trt, data = thiamethoxam, weights = visit) summary(wfit) #>  #> Call: #> el_lm(formula = fruit ~ trt, data = thiamethoxam, weights = visit) #>  #> Coefficients: #>             Estimate   Chisq Pr(>Chisq)     #> (Intercept)   6.0985 445.025     <2e-16 *** #> trtSpray     -0.4853   0.259     0.6107     #> trtFurrow     2.1730   3.884     0.0487 *   #> trtSeed      -0.6454   0.468     0.4937     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> Chisq: 19.63, df: 3, Pr(>Chisq): 0.0002024 #>  #> Constrained EL: converged  #>   ## Missing data fit2 <- el_lm(fruit ~ trt + scb, data = thiamethoxam,   na.action = na.omit, offset = NULL ) summary(fit2) #>  #> Call: #> el_lm(formula = fruit ~ trt + scb, data = thiamethoxam, na.action = na.omit,  #>     offset = NULL) #>  #> Coefficients: #>             Estimate   Chisq Pr(>Chisq)     #> (Intercept)  5.75996 433.212    < 2e-16 *** #> trtSpray    -0.41891   0.258    0.61181     #> trtFurrow    2.98597  10.481    0.00121 **  #> trtSeed     -0.29911   0.141    0.70748     #> scb         -0.05937   1.150    0.28359     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>   (1 observation deleted due to missingness) #>  #> Chisq: 23.27, df: 4, Pr(>Chisq): 0.0001116 #>  #> Constrained EL: converged  #>"},{"path":"https://markean.github.io/melt/reference/el_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical likelihood for the mean — el_mean","title":"Empirical likelihood for the mean — el_mean","text":"Computes empirical likelihood mean.","code":""},{"path":"https://markean.github.io/melt/reference/el_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical likelihood for the mean — el_mean","text":"","code":"el_mean(x, par, weights = NULL, control = el_control())"},{"path":"https://markean.github.io/melt/reference/el_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical likelihood for the mean — el_mean","text":"x numeric matrix, object can coerced numeric matrix. row corresponds observation. number rows must greater number columns. par numeric vector parameter values tested. length vector must number columns x. weights optional numeric vector weights used fitting process. length vector must number rows x. Defaults NULL, corresponding identical weights. non-NULL, weighted empirical likelihood computed. control object class ControlEL constructed el_control().","code":""},{"path":"https://markean.github.io/melt/reference/el_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical likelihood for the mean — el_mean","text":"object class EL.","code":""},{"path":"https://markean.github.io/melt/reference/el_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical likelihood for the mean — el_mean","text":"Let \\(X_i\\) independent identically distributed \\(p\\)-dimensional random variable unknown distribution \\(P\\) \\(= 1, \\dots, n\\). assume \\({\\textrm{E}[X_i]} =   {\\theta_0} \\{\\rm{\\!R}}^p\\) \\(P\\) positive definite covariance matrix. Given value \\(\\theta\\), (profile) empirical likelihood ratio defined $$R(\\theta) =   \\max_{p_i}\\left\\{\\prod_{= 1}^n np_i :   \\sum_{= 1}^n p_i X_i = \\theta,\\   p_i \\geq 0,\\   \\sum_{= 1}^n p_i = 1   \\right\\}.$$ el_mean() computes empirical log-likelihood ratio statistic \\(-2\\log R(\\theta)\\), along values EL.","code":""},{"path":"https://markean.github.io/melt/reference/el_mean.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical likelihood for the mean — el_mean","text":"Owen (1990). “Empirical Likelihood Ratio Confidence Regions.” Annals Statistics, 18(1), 90--120. doi:10.1214/aos/1176347494 .","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/el_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical likelihood for the mean — el_mean","text":"","code":"## Scalar mean set.seed(414) x <- rnorm(100) par <- 0 el_mean(x, par) #>  #> \tEmpirical Likelihood #>  #> Model: mean  #>  #> Maximum EL estimates: #> [1] -0.0006666 #>  #> Chisq: 3.654e-05, df: 1, Pr(>Chisq): 0.9952 #>  #> EL evaluation: converged  #>   ## Vector mean data(\"faithful\") el_mean(faithful, par = c(3.5, 70)) #>  #> \tEmpirical Likelihood #>  #> Model: mean  #>  #> Maximum EL estimates: #> eruptions   waiting  #>     3.488    70.897  #>  #> Chisq: 8.483, df: 2, Pr(>Chisq): 0.01439 #>  #> EL evaluation: converged  #>   ## Weighted data w <- rep(c(1, 2), each = nrow(faithful) / 2) el_mean(faithful, par = c(3.5, 70), weights = w) #>  #> \tWeighted Empirical Likelihood #>  #> Model: mean  #>  #> Maximum EL estimates: #> eruptions   waiting  #>     3.498    70.931  #>  #> Chisq: 7.282, df: 2, Pr(>Chisq): 0.02622 #>  #> EL evaluation: converged  #>"},{"path":"https://markean.github.io/melt/reference/el_pairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise comparisons for general block designs — el_pairwise","title":"Pairwise comparisons for general block designs — el_pairwise","text":"Tests pairwise comparisons comparisons control general block designs. Two single step asymptotic \\(k\\)-FWER (generalized family-wise error rate) controlling procedures available: asymptotic Monte Carlo (AMC) nonparametric bootstrap (NB). function deprecated removed future release.","code":""},{"path":"https://markean.github.io/melt/reference/el_pairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise comparisons for general block designs — el_pairwise","text":"","code":"el_pairwise(   formula,   data,   control = NULL,   k = 1L,   alpha = 0.05,   method = c(\"AMC\", \"NB\"),   B,   nthreads = 1L,   maxit = 10000L,   abstol = 1e-08 )"},{"path":"https://markean.github.io/melt/reference/el_pairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise comparisons for general block designs — el_pairwise","text":"formula object class formula (one can coerced class) symbolic description model fitted. must specify variables response, treatment, block 'response ~ treatment | block'. Note use vertical bar (|) separating treatment block. data data frame, list environment (object coercible .data.frame() data frame) containing variables formula. control optional single character specifies treatment comparisons control. k single integer \\(k\\) \\(k\\)-FWER. Defaults 1. alpha single numeric overall significance level. Defaults 0.05. method single character procedure used; either AMC NB supported. Defaults AMC. B single integer number Monte Carlo samples AMC (number bootstrap replicates NB). nthreads single integer number threads parallel computation via OpenMP (available). Defaults 1. maxit single integer maximum number iterations constrained minimization empirical likelihood. Defaults 10000. abstol single numeric absolute convergence tolerance optimization. Defaults 1e-08.","code":""},{"path":"https://markean.github.io/melt/reference/el_pairwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise comparisons for general block designs — el_pairwise","text":"list class c(\"pairwise\", \"melt\").","code":""},{"path":"https://markean.github.io/melt/reference/el_pairwise.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pairwise comparisons for general block designs — el_pairwise","text":"Kim E, MacEachern S, Peruggia M (2021). “Empirical Likelihood Analysis Experimental Designs.” arxiv:2112.09206. URL https://arxiv.org/abs/2112.09206.","code":""},{"path":"https://markean.github.io/melt/reference/el_pairwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise comparisons for general block designs — el_pairwise","text":"","code":"if (FALSE) { # All pairwise comparisons data(\"clothianidin\") el_pairwise(clo ~ trt | blk, data = clothianidin, B = 1000)  # Comparisons with control el_pairwise(clo ~ trt | blk, data = clothianidin, control = \"Naked\",   method = \"NB\", B = 500 )}"},{"path":"https://markean.github.io/melt/reference/el_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical likelihood for the standard deviation — el_sd","title":"Empirical likelihood for the standard deviation — el_sd","text":"Computes empirical likelihood standard deviation.","code":""},{"path":"https://markean.github.io/melt/reference/el_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical likelihood for the standard deviation — el_sd","text":"","code":"el_sd(x, mean, sd, weights = NULL, control = el_control())"},{"path":"https://markean.github.io/melt/reference/el_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical likelihood for the standard deviation — el_sd","text":"x numeric vector, object can coerced numeric vector. mean single numeric (known) mean value. sd positive single numeric parameter value tested. weights optional numeric vector weights used fitting process. length vector must length x. Defaults NULL, corresponding identical weights. non-NULL, weighted empirical likelihood computed. control object class ControlEL constructed el_control().","code":""},{"path":"https://markean.github.io/melt/reference/el_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical likelihood for the standard deviation — el_sd","text":"object class EL.","code":""},{"path":"https://markean.github.io/melt/reference/el_sd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical likelihood for the standard deviation — el_sd","text":"Let \\(X_i\\) independent identically random variable unknown distribution \\(P\\) \\(= 1, \\dots, n\\). assume \\({\\textrm{E}[X_i]} = {\\mu_0}\\) known \\(P\\) variance \\(\\sigma_0^2\\). Given value \\(\\sigma\\), (profile) empirical likelihood ratio defined $$R(\\sigma) =   \\max_{p_i}\\left\\{\\prod_{= 1}^n np_i :   \\sum_{= 1}^n p_i (X_i - \\mu_0)^2 = \\sigma^2,\\   p_i \\geq 0,\\   \\sum_{= 1}^n p_i = 1   \\right\\}.$$ el_sd() computes empirical log-likelihood ratio statistic \\(-2\\log R(\\sigma)\\), along values EL.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/el_sd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical likelihood for the standard deviation — el_sd","text":"","code":"data(\"women\") x <- women$height w <- women$weight el_sd(x, mean = 65, sd = 5, weights = w) #>  #> \tWeighted Empirical Likelihood #>  #> Model: sd  #>  #> Maximum EL estimates: #> [1] 4.34 #>  #> Chisq: 1.843, df: 1, Pr(>Chisq): 0.1746 #>  #> EL evaluation: converged  #>"},{"path":"https://markean.github.io/melt/reference/eld.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical likelihood displacement — eld","title":"Empirical likelihood displacement — eld","text":"Computes empirical likelihood displacement model diagnostics outlier detection.","code":""},{"path":"https://markean.github.io/melt/reference/eld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical likelihood displacement — eld","text":"","code":"# S4 method for EL eld(object, control = el_control())  # S4 method for GLM eld(object, control = el_control())"},{"path":"https://markean.github.io/melt/reference/eld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical likelihood displacement — eld","text":"object object inherits EL, including CEL, LM, GLM. control object class ControlEL constructed el_control().","code":""},{"path":"https://markean.github.io/melt/reference/eld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical likelihood displacement — eld","text":"object class ELD.","code":""},{"path":"https://markean.github.io/melt/reference/eld.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical likelihood displacement — eld","text":"Let \\(L(\\theta)\\) empirical log-likelihood function based full sample \\(n\\) observations. maximum empirical likelihood estimate denoted \\(\\hat{\\theta}\\). Consider reduced sample \\(\\)th observation deleted corresponding estimate \\(\\hat{\\theta}_{()}\\). empirical likelihood displacement defined $$\\textrm{ELD}_i = 2\\{L(\\hat{\\theta}) - L(\\hat{\\theta}_{()})\\}.$$ \\(\\textrm{ELD}_i \\) large, \\(\\)th observation influential point can inspected possible outlier. eld computes \\(\\textrm{ELD}_i \\) \\(= 1, \\dots, n \\).","code":""},{"path":"https://markean.github.io/melt/reference/eld.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical likelihood displacement — eld","text":"Lazar NA (2005). “Assessing Effect Individual Data Points Inference Empirical Likelihood.” Journal Computational Graphical Statistics, 14(3), 626–642. doi:10.1198/106186005X59568 . Zhu H, Ibrahim JG, Tang N, Zhang H (2008). “Diagnostic Measures Empirical Likelihood General Estimating Equations.” Biometrika, 95(2), 489--507. doi:10.1093/biomet/asm094 .","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/eld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical likelihood displacement — eld","text":"","code":"data(\"precip\") fit <- el_mean(precip, par = 30) eld <- eld(fit) plot(eld)"},{"path":"https://markean.github.io/melt/reference/elmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical likelihood multiple tests — elmt","title":"Empirical likelihood multiple tests — elmt","text":"Tests multiple linear hypotheses simultaneously.","code":""},{"path":"https://markean.github.io/melt/reference/elmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical likelihood multiple tests — elmt","text":"","code":"# S4 method for EL elmt(object, rhs = NULL, lhs = NULL, alpha = 0.05, control = el_control())"},{"path":"https://markean.github.io/melt/reference/elmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical likelihood multiple tests — elmt","text":"object object inherits EL, including CEL, LM, GLM. rhs numeric vector (column matrix) list numeric vectors right-hand sides hypotheses. Defaults NULL. See ‘Details’. lhs numeric matrix list numeric matrices left-hand sides hypothesis. row matrices gives linear combination parameters object. number columns equal number parameters. Defaults NULL. See ‘Details’. alpha single numeric overall significance level. Defaults 0.05. control object class ControlEL constructed el_control().","code":""},{"path":"https://markean.github.io/melt/reference/elmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical likelihood multiple tests — elmt","text":"object class ELMT.","code":""},{"path":"https://markean.github.io/melt/reference/elmt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical likelihood multiple tests — elmt","text":"elmt() tests multiple hypotheses simultaneously. hypothesis corresponds constrained empirical likelihood ratio described CEL. rhs lhs NULL. right-hand side left-hand side hypothesis must specified described elt(). specifying linear contrasts conveniently, rhs lhs also take numeric vector numeric matrix, respectively. element rhs row lhs correspond contrast (hypothesis). vector empirical likelihood ratio statistics asymptotically follows multivariate chi-square distribution complete null hypothesis. multiple testing procedure asymptotically controls family-wise error rate level alpha. Based distribution maximum test statistics, adjusted p-values estimated Monte Carlo simulation.","code":""},{"path":"https://markean.github.io/melt/reference/elmt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical likelihood multiple tests — elmt","text":"Kim E, MacEachern S, Peruggia M (2021). “Empirical Likelihood Analysis Experimental Designs.” arxiv:2112.09206. URL https://arxiv.org/abs/2112.09206.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/elmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical likelihood multiple tests — elmt","text":"","code":"## Example 1: bivariate mean (list `rhs` & no `lhs`) data(\"women\") fit <- el_mean(women, par = c(65, 135)) rhs <- list(c(64, 133), c(66, 140)) set.seed(143) elmt(fit, rhs = rhs) #>  #> \tEmpirical Likelihood Multiple Tests #>  #> Overall significance level: 0.05  #>  #> Calibration: Multivariate chi-square  #>  #> Hypotheses: #>   Chisq Df p.adj #> 1 2.069  2 0.356 #> 2 1.255  2 0.534 #>  #> Common critical value: 5.9851  #>   ## Example 2: pairwise comparison (no `rhs` & matrix `lhs`) data(\"clothianidin\") fit2 <- el_lm(clo ~ -1 + trt, clothianidin) lhs <- matrix(c(   1, -1, 0, 0,   0, 1, -1, 0,   0, 0, 1, -1 ), byrow = TRUE, nrow = 3) set.seed(629) elmt(fit2, lhs = lhs) #>  #> \tEmpirical Likelihood Multiple Tests #>  #> Overall significance level: 0.05  #>  #> Calibration: Multivariate chi-square  #>  #> Hypotheses: #>   Estimate Chisq Df  p.adj   #> 1  -1.0525 5.510  1 0.0516 . #> 2  -0.6269 1.062  1 0.6139   #> 3  -1.4932 3.774  1 0.1353   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Common critical value: 5.5668  #>   ## Example 3: arbitrary hypotheses (list `rhs` & list `lhs`) data(\"mtcars\") fit <- el_lm(mpg ~ wt + qsec, data = mtcars) lhs <- list(rbind(c(1, 4, 0)), rbind(c(0, 1, 0), c(0, 0, 1))) rhs <- list(0, c(-6, 1)) elmt(fit, rhs = rhs, lhs = lhs) #>  #> \tEmpirical Likelihood Multiple Tests #>  #> Overall significance level: 0.05  #>  #> Calibration: Multivariate chi-square  #>  #> Hypotheses: #>   Chisq Df p.adj #> 1 0.037  1 0.984 #> 2 2.790  2 0.250 #>  #> Common critical value: 6.0098  #>"},{"path":"https://markean.github.io/melt/reference/elt.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical likelihood test — elt","title":"Empirical likelihood test — elt","text":"Tests linear hypothesis.","code":""},{"path":"https://markean.github.io/melt/reference/elt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical likelihood test — elt","text":"","code":"# S4 method for EL elt(   object,   rhs = NULL,   lhs = NULL,   alpha = 0.05,   calibrate = \"chisq\",   control = el_control() )"},{"path":"https://markean.github.io/melt/reference/elt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical likelihood test — elt","text":"object object inherits EL, including CEL, LM, GLM. rhs numeric vector column matrix right-hand side hypothesis, many entries rows lhs. Defaults NULL. See ‘Details’. lhs numeric matrix vector (treated row matrix) left-hand side hypothesis. row gives linear combination parameters object. number columns equal number parameters. character vector symbolic description hypothesis allowed. Defaults NULL. See ‘Details’. alpha single numeric significance level. Defaults 0.05. calibrate single character calibration method. case-insensitive must one \"chisq\", \"boot\", \"f\". Defaults \"chisq\". See ‘Details’. control object class ControlEL constructed el_control().","code":""},{"path":"https://markean.github.io/melt/reference/elt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical likelihood test — elt","text":"object class ELT. lhs non-NULL, optim slot corresponds CEL. Otherwise, corresponds EL.","code":""},{"path":"https://markean.github.io/melt/reference/elt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical likelihood test — elt","text":"elt() performs constrained minimization \\(l(\\theta)\\) described CEL. rhs lhs NULL. non-NULL lhs, required lhs full row rank \\(q \\leq p\\) \\(p\\) equal number parameters object. Depending specification rhs lhs, following three cases: rhs lhs non-NULL, constrained minimization performed right-hand side \\(r\\) left-hand side \\(L\\) $$\\inf_{\\theta: L\\theta = r} l(\\theta).$$ rhs NULL, \\(r\\) set zero vector \\(\\inf_{\\theta: L\\theta = 0} l(\\theta)\\). lhs NULL, \\(L\\) set identity matrix problem reduces evaluating \\(r\\) \\(l(r)\\). calibrate specifies calibration method used. Three methods available: \"chisq\" (chi-square calibration), \"boot\" (bootstrap calibration), \"f\" (\\(F\\) calibration). \"boot\" applicable lhs NULL. nthreads, seed, B slots control apply bootstrap procedure. \"f\" applicable mean parameter lhs NULL.","code":""},{"path":"https://markean.github.io/melt/reference/elt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical likelihood test — elt","text":"Adimari G, Guolo (2010). “Note Asymptotic Behaviour Empirical Likelihood Statistics.” Statistical Methods & Applications, 19(4), 463--476. doi:10.1007/s10260-010-0137-9 . Qin J, Lawless J (1995). “Estimating Equations, Empirical Likelihood Constraints Parameters.” Canadian Journal Statistics, 23(2), 145--159. doi:10.2307/3315441 .","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/elt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical likelihood test — elt","text":"","code":"## F calibration for the mean data(\"precip\") fit <- el_mean(precip, 32) elt(fit, rhs = 32, calibrate = \"f\") #>  #> \tEmpirical Likelihood Test #>  #> Hypothesis: #> par = 32 #>  #> Significance level: 0.05, Calibration: F  #>  #> Statistic: 2.996777, Critical value: 3.979807  #>  #> p-value: 0.08789988  #>   ## Test of no treatment effect data(\"clothianidin\") contrast <- matrix(c(   1, -1, 0, 0,   0, 1, -1, 0,   0, 0, 1, -1 ), byrow = TRUE, nrow = 3) fit2 <- el_lm(clo ~ -1 + trt, clothianidin) elt(fit2, lhs = contrast) #>  #> \tEmpirical Likelihood Test #>  #> Hypothesis: #> trtNaked - trtFungicide = 0 #> trtFungicide - trtLow = 0 #> trtLow - trtHigh = 0 #>  #> Significance level: 0.05, Calibration: Chi-square  #>  #> Statistic: 26.59804, Critical value: 7.814728  #>  #> p-value: 7.147731e-06  #>   ## A symbolic description of the same hypothesis elt(fit2, lhs = c(   \"trtNaked - trtFungicide\", \"trtFungicide - trtLow\", \"trtLow - trtHigh\" )) #>  #> \tEmpirical Likelihood Test #>  #> Hypothesis: #> trtNaked - trtFungicide = 0 #> trtFungicide - trtLow = 0 #> trtLow - trtHigh = 0 #>  #> Significance level: 0.05, Calibration: Chi-square  #>  #> Statistic: 26.59804, Critical value: 7.814728  #>  #> p-value: 7.147731e-06  #>"},{"path":"https://markean.github.io/melt/reference/getDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Degrees of freedom — getDF","title":"Degrees of freedom — getDF","text":"Extracts degrees freedom model.","code":""},{"path":"https://markean.github.io/melt/reference/getDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degrees of freedom — getDF","text":"","code":"# S4 method for EL getDF(object)  # S4 method for ELMT getDF(object)  # S4 method for logLikEL getDF(object)  # S4 method for SummaryLM getDF(object)"},{"path":"https://markean.github.io/melt/reference/getDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degrees of freedom — getDF","text":"object object inherits EL, ELT, ELMT, logLikEL, SummaryLM.","code":""},{"path":"https://markean.github.io/melt/reference/getDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Degrees of freedom — getDF","text":"integer vector.","code":""},{"path":"https://markean.github.io/melt/reference/getDF.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Degrees of freedom — getDF","text":"getDF(EL): Extracts degrees freedom. getDF(ELMT): Extracts marginal degrees freedoms. getDF(logLikEL): Extracts degrees freedom. getDF(SummaryLM): Extracts degrees freedom.","code":""},{"path":"https://markean.github.io/melt/reference/getDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Degrees of freedom — getDF","text":"","code":"data(\"faithful\") fit <- el_mean(faithful, par = c(3.5, 70)) getDF(fit) #> [1] 2"},{"path":"https://markean.github.io/melt/reference/getOptim.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization results — getOptim","title":"Optimization results — getOptim","text":"Extracts optimization results model.","code":""},{"path":"https://markean.github.io/melt/reference/getOptim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization results — getOptim","text":"","code":"# S4 method for EL getOptim(object, ...)  # S4 method for ELT getOptim(object, ...)"},{"path":"https://markean.github.io/melt/reference/getOptim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization results — getOptim","text":"object object inherits EL ELT. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/getOptim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimization results — getOptim","text":"list following optimization results: par numeric vector parameter value. See documentation EL CEL. lambda numeric vector Lagrange multipliers. iterations single integer number iterations performed. convergence single logical convergence status.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/getOptim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization results — getOptim","text":"","code":"data(\"precip\") fit <- el_mean(precip, par = 40) getOptim(fit) #> $par #> [1] 40 #>  #> $lambda #> [1] -0.0267627 #>  #> $iterations #> [1] 5 #>  #> $convergence #> [1] TRUE #>"},{"path":"https://markean.github.io/melt/reference/logL.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical log-likelihood — logL","title":"Empirical log-likelihood — logL","text":"Extracts empirical log-likelihood model.","code":""},{"path":"https://markean.github.io/melt/reference/logL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical log-likelihood — logL","text":"","code":"# S4 method for EL logL(object, ...)  # S4 method for ELT logL(object, ...)"},{"path":"https://markean.github.io/melt/reference/logL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical log-likelihood — logL","text":"object object inherits EL ELT. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/logL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical log-likelihood — logL","text":"single numeric.","code":""},{"path":"https://markean.github.io/melt/reference/logL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical log-likelihood — logL","text":"Baggerly KA (1998). “Empirical Likelihood Goodness--Fit Measure.” Biometrika, 85(3), 535--547. doi:10.1093/biomet/asm094 .","code":""},{"path":"https://markean.github.io/melt/reference/logL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical log-likelihood — logL","text":"","code":"data(\"precip\") fit <- el_mean(precip, par = 40) logL(fit) #> [1] -302.3734"},{"path":"https://markean.github.io/melt/reference/logLR.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical log-likelihood ratio — logLR","title":"Empirical log-likelihood ratio — logLR","text":"Extracts empirical log-likelihood ratio model.","code":""},{"path":"https://markean.github.io/melt/reference/logLR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical log-likelihood ratio — logLR","text":"","code":"# S4 method for EL logLR(object, ...)  # S4 method for ELT logLR(object, ...)"},{"path":"https://markean.github.io/melt/reference/logLR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical log-likelihood ratio — logLR","text":"object object inherits EL ELT. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/logLR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical log-likelihood ratio — logLR","text":"single numeric.","code":""},{"path":"https://markean.github.io/melt/reference/logLR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical log-likelihood ratio — logLR","text":"Baggerly KA (1998). “Empirical Likelihood Goodness--Fit Measure.” Biometrika, 85(3), 535--547. doi:10.1093/biomet/asm094 .","code":""},{"path":"https://markean.github.io/melt/reference/logLR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical log-likelihood ratio — logLR","text":"","code":"data(\"precip\") fit <- el_mean(precip, par = 40) logLR(fit) #> [1] -4.978739"},{"path":"https://markean.github.io/melt/reference/logLik.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum empirical log-likelihood — logLik","title":"Maximum empirical log-likelihood — logLik","text":"Extracts empirical log-likelihood model evaluated estimated coefficients.","code":""},{"path":"https://markean.github.io/melt/reference/logLik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum empirical log-likelihood — logLik","text":"","code":"# S4 method for EL logLik(object, ...)"},{"path":"https://markean.github.io/melt/reference/logLik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum empirical log-likelihood — logLik","text":"object object inherits EL. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/logLik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum empirical log-likelihood — logLik","text":"object class logLikEL.","code":""},{"path":"https://markean.github.io/melt/reference/logLik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum empirical log-likelihood — logLik","text":"","code":"data(\"precip\") fit <- el_mean(precip, par = 40) logLik(fit) #> 'Empirical log Lik.' -297.3947 (df=1)"},{"path":"https://markean.github.io/melt/reference/logLikEL-class.html","id":null,"dir":"Reference","previous_headings":"","what":"logLikEL class — logLikEL-class","title":"logLikEL class — logLikEL-class","text":"S4 class empirical log-likelihood.","code":""},{"path":"https://markean.github.io/melt/reference/logLikEL-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"logLikEL class — logLikEL-class","text":"df single integer degrees freedom number (estimated) parameters model.","code":""},{"path":"https://markean.github.io/melt/reference/logLikEL-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logLikEL class — logLikEL-class","text":"","code":"showClass(\"logLikEL\") #> Class \"logLikEL\" [package \"melt\"] #>  #> Slots: #>                        #> Name:    .Data      df #> Class: numeric integer #>  #> Extends:  #> Class \"numeric\", from data part #> Class \"vector\", by class \"numeric\", distance 2"},{"path":"https://markean.github.io/melt/reference/melt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"melt: Multiple Empirical Likelihood Tests — melt-package","title":"melt: Multiple Empirical Likelihood Tests — melt-package","text":"Performs multiple empirical likelihood tests linear generalized linear models. core computational routines implemented using 'Eigen' C++ library 'RcppEigen' interface, OpenMP parallel computation. Details testing procedures given Kim, MacEachern, Peruggia (2021) arXiv:2112.09206. work supported U.S. National Science Foundation Grants . SES-1921523 DMS-2015552.","code":""},{"path":"https://markean.github.io/melt/reference/melt-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"melt: Multiple Empirical Likelihood Tests — melt-package","text":"Kim E, MacEachern S, Peruggia M (2021). “Empirical Likelihood Analysis Experimental Designs.” arxiv:2112.09206. URL https://arxiv.org/abs/2112.09206.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/melt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"melt: Multiple Empirical Likelihood Tests — melt-package","text":"Maintainer: Eunseop Kim kim.7302@osu.edu contributors: Steven MacEachern [contributor, thesis advisor] Mario Peruggia [contributor, thesis advisor] Pierre Chausse [reviewer] Alex Stringer [reviewer]","code":""},{"path":"https://markean.github.io/melt/reference/nobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of observations in a model — nobs","title":"Number of observations in a model — nobs","text":"Extracts number observations model.","code":""},{"path":"https://markean.github.io/melt/reference/nobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of observations in a model — nobs","text":"","code":"# S4 method for EL nobs(object, ...)"},{"path":"https://markean.github.io/melt/reference/nobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of observations in a model — nobs","text":"object object inherits EL. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/nobs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of observations in a model — nobs","text":"single integer.","code":""},{"path":"https://markean.github.io/melt/reference/nobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of observations in a model — nobs","text":"","code":"data(\"precip\") fit <- el_mean(precip, par = 40) nobs(fit) #> [1] 70"},{"path":"https://markean.github.io/melt/reference/pVal.html","id":null,"dir":"Reference","previous_headings":"","what":"\\(p\\)-value — pVal","title":"\\(p\\)-value — pVal","text":"Extracts \\(p\\)-value model.","code":""},{"path":"https://markean.github.io/melt/reference/pVal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\\(p\\)-value — pVal","text":"","code":"# S4 method for EL pVal(object, ...)  # S4 method for ELT pVal(object, ...)  # S4 method for ELMT pVal(object, ...)"},{"path":"https://markean.github.io/melt/reference/pVal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\\(p\\)-value — pVal","text":"object object inherits EL, ELT, ELMT. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/pVal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\\(p\\)-value — pVal","text":"form value returned pVal() depends class argument.","code":""},{"path":"https://markean.github.io/melt/reference/pVal.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"\\(p\\)-value — pVal","text":"pVal(EL): Extracts \\(p\\)-value. pVal(ELT): Extracts \\(p\\)-value. pVal(ELMT): Extracts multiplicity adjusted \\(p\\)-values.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/pVal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\\(p\\)-value — pVal","text":"","code":"data(\"precip\") fit <- el_mean(precip, par = 40) pVal(fit) #> [1] 0.001601974"},{"path":"https://markean.github.io/melt/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot methods — plot","title":"Plot methods — plot","text":"Provides plot methods objects.","code":""},{"path":"https://markean.github.io/melt/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot methods — plot","text":"","code":"# S4 method for ConfregEL plot(x, y, ...)  # S4 method for EL plot(x, y, ...)  # S4 method for ELD plot(x, y, ...)"},{"path":"https://markean.github.io/melt/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot methods — plot","text":"x object plotted. y used. ... graphical parameters (see par).","code":""},{"path":"https://markean.github.io/melt/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot methods — plot","text":"return value, called side effects.","code":""},{"path":"https://markean.github.io/melt/reference/plot.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Plot methods — plot","text":"plot(ConfregEL): Plots two-dimensional confidence region model parameters. plot(EL): Plots empirical likelihood displacement values versus observation index. eld() called implicitly. plot(ELD): Plots empirical likelihood displacement values versus observation index.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot methods — plot","text":"","code":"## Model data(\"mtcars\") fit <- el_lm(hp ~ wt, data = mtcars)  ## Confidence region out1 <- confreg(fit, npoints = 500) plot(out1)   ## Empirical likelihood displacement out2 <- eld(fit) plot(out2)  ## A shortcut to `ELD` plot(fit)"},{"path":"https://markean.github.io/melt/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods — print","title":"Print methods — print","text":"Provides print methods objects.","code":""},{"path":"https://markean.github.io/melt/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods — print","text":"","code":"# S4 method for EL print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)  # S4 method for ELT print(x, digits = getOption(\"digits\"), ...)  # S4 method for ELMT print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S4 method for LM print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)  # S4 method for logLikEL print(x, digits = getOption(\"digits\"), ...)  # S4 method for SummaryGLM print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S4 method for SummaryLM print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S4 method for SummaryQGLM print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )"},{"path":"https://markean.github.io/melt/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods — print","text":"x object printed. ... arguments passed methods. digits single integer number significant digits passed format(). signif.stars single logical. TRUE, ‘significance stars’ printed parameter.","code":""},{"path":"https://markean.github.io/melt/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods — print","text":"argument x (invisibly).","code":""},{"path":"https://markean.github.io/melt/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods — print","text":"","code":"data(\"precip\") fit <- el_mean(precip, par = 40) print(fit) #>  #> \tEmpirical Likelihood #>  #> Model: mean  #>  #> Maximum EL estimates: #> [1] 34.89 #>  #> Chisq: 9.957, df: 1, Pr(>Chisq): 0.001602 #>  #> EL evaluation: converged  #>"},{"path":"https://markean.github.io/melt/reference/sigTests.html","id":null,"dir":"Reference","previous_headings":"","what":"Significance tests — sigTests","title":"Significance tests — sigTests","text":"Extracts results significance tests model.","code":""},{"path":"https://markean.github.io/melt/reference/sigTests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Significance tests — sigTests","text":"","code":"# S4 method for LM sigTests(object, ...)  # S4 method for SummaryLM sigTests(object, ...)"},{"path":"https://markean.github.io/melt/reference/sigTests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Significance tests — sigTests","text":"object object inherits LM SummaryLM. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/sigTests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Significance tests — sigTests","text":"form value returned sigTests() depends class argument.","code":""},{"path":"https://markean.github.io/melt/reference/sigTests.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Significance tests — sigTests","text":"sigTests(LM): Extracts list optimization results significance tests. sigTests(SummaryLM): Extracts matrix results significance tests.","code":""},{"path":[]},{"path":"https://markean.github.io/melt/reference/sigTests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Significance tests — sigTests","text":"","code":"data(\"mtcars\") fit <- el_lm(mpg ~ ., data = mtcars) sigTests(fit) #> $statistic #> (Intercept)         cyl        disp          hp        drat          wt  #> 442.0394887   0.2334334 409.8798759 420.7490737 405.1301030 439.0974196  #>        qsec          vs          am        gear        carb  #> 442.4803698   0.4249416  26.6281283 401.7291427   0.5095781  #>  #> $iterations #> (Intercept)         cyl        disp          hp        drat          wt  #>           0          36           0           0           0           0  #>        qsec          vs          am        gear        carb  #>           0          36         200           0         115  #>  #> $convergence #> (Intercept)         cyl        disp          hp        drat          wt  #>       FALSE        TRUE       FALSE       FALSE       FALSE       FALSE  #>        qsec          vs          am        gear        carb  #>       FALSE        TRUE       FALSE       FALSE        TRUE  #>  sigTests(summary(fit)) #>                Estimate       Chisq   Pr(>Chisq) #> (Intercept) 12.30337416 442.0394887 3.895625e-98 #> cyl         -0.11144048   0.2334334 6.289896e-01 #> disp         0.01333524 409.8798759 3.892910e-91 #> hp          -0.02148212 420.7490737 1.676493e-93 #> drat         0.78711097 405.1301030 4.209139e-90 #> wt          -3.71530393 439.0974196 1.701700e-97 #> qsec         0.82104075 442.4803698 3.123385e-98 #> vs           0.31776281   0.4249416 5.144815e-01 #> am           2.52022689  26.6281283 2.466269e-07 #> gear         0.65541302 401.7291427 2.314856e-89 #> carb        -0.19941925   0.5095781 4.753215e-01"},{"path":"https://markean.github.io/melt/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary methods — summary","title":"Summary methods — summary","text":"Provides summary methods objects.","code":""},{"path":"https://markean.github.io/melt/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary methods — summary","text":"","code":"# S4 method for LM summary(object, ...)  # S4 method for GLM summary(object, ...)  # S4 method for QGLM summary(object, ...)"},{"path":"https://markean.github.io/melt/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary methods — summary","text":"object object summarized. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary methods — summary","text":"form value returned summary() depends class argument.","code":""},{"path":"https://markean.github.io/melt/reference/summary.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Summary methods — summary","text":"summary(LM): Summarizes results overall model test significance tests coefficients. summary(GLM): Summarizes results overall model test significance tests coefficients. dispersion parameter extracted display. summary(QGLM): Summarizes results overall model test significance tests coefficients. estimated dispersion parameter extracted display.","code":""},{"path":"https://markean.github.io/melt/reference/summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary methods — summary","text":"","code":"data(\"mtcars\") fit <- el_lm(mpg ~ wt, data = mtcars) summary(fit) #>  #> Call: #> el_lm(formula = mpg ~ wt, data = mtcars) #>  #> Coefficients: #>             Estimate Chisq Pr(>Chisq)     #> (Intercept)   37.285 443.3     <2e-16 *** #> wt            -5.344 439.1     <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> Chisq: 439.1, df: 1, Pr(>Chisq): < 2.2e-16 #>  #> Constrained EL: not converged  #>"},{"path":"https://markean.github.io/melt/reference/thiamethoxam.html","id":null,"dir":"Reference","previous_headings":"","what":"Thiamethoxam applications in squash crops — thiamethoxam","title":"Thiamethoxam applications in squash crops — thiamethoxam","text":"dataset effect thiamethoxam application method plant variety bees.","code":""},{"path":"https://markean.github.io/melt/reference/thiamethoxam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thiamethoxam applications in squash crops — thiamethoxam","text":"","code":"data(\"thiamethoxam\")"},{"path":"https://markean.github.io/melt/reference/thiamethoxam.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thiamethoxam applications in squash crops — thiamethoxam","text":"data frame 55 observations 11 variables: trt Treatment. var Variety. rep Replicate. fruit Average fruit number per plant. avg_mass Individual Fruit mass average (g). mass Fruit mass per plant (g). yield Yield (4 plants). visit Bee visits per plot. foliage Proportion foliage consumed striped cucumber beetle. scb Striped cucumber beetle per plant. defoliation Defoliation percentage.","code":""},{"path":"https://markean.github.io/melt/reference/thiamethoxam.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thiamethoxam applications in squash crops — thiamethoxam","text":"Obregon D, Pederson G, Taylor , Poveda K (2022). “Pest Control Pollinator Protection Dilemma: Case Thiamethoxam Prophylactic Applications Squash Crops.” PLOS ONE, 17(5), 1--18. doi:10.1371/journal.pone.0267984 .","code":""},{"path":"https://markean.github.io/melt/reference/thiamethoxam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thiamethoxam applications in squash crops — thiamethoxam","text":"","code":"data(\"thiamethoxam\") thiamethoxam #>       trt var rep    fruit avg_mass      mass     yield visit foliage      scb #> 1   Spray  GZ   1  3.25000 265.3393  2284.660  5537.660  1.00 0.02006 10.12500 #> 2   Spray  GZ   2  4.25000 310.4869  2312.150  8453.250  2.25 0.01199  5.75000 #> 3   Spray  GZ   3  5.00000 240.1425  1795.820  6443.040  3.50 0.02636  3.62500 #> 4   Spray  GZ   4  2.50000 181.3359  2781.670  5567.520  4.25 0.07131  3.25000 #> 5   Spray  GZ   5  3.75000 235.2383  2302.770  6906.860  0.75 0.05768  1.87500 #> 6   Spray  GZ   6  7.25000 391.5038  2027.860 12633.230  6.50 0.01099  2.75000 #> 7   Spray  GZ   7  8.00000 442.7715  6242.720 17418.230  9.00 0.00198  2.75000 #> 8   Spray SPM   1  3.50000 181.9009   987.210  4805.840  5.75 0.00104  5.75000 #> 9   Spray SPM   2  4.75000 298.3934  6801.760 11997.930 11.75 0.00129 22.87500 #> 10  Spray SPM   3  6.75000 276.2565  4694.510 11995.360 13.00 0.00333  2.62500 #> 11  Spray SPM   4  7.00000 271.9790  1433.700 10879.160 12.75 0.00014  2.00000 #> 12  Spray SPM   5  6.75000 402.3045 14564.780 20852.390 14.25 0.00048  1.75000 #> 13  Spray SPM   6  4.75000 235.5726  1753.863  8567.234 11.75 0.00064  1.50000 #> 14  Spray SPM   7  3.00000 212.9332  2799.690  7190.840 10.00 0.00113  5.37500 #> 15 Furrow  GZ   1  5.75000 424.1494 13956.729 19848.309  3.75 0.00430  4.75000 #> 16 Furrow  GZ   2 10.25000 561.5778 15274.470 28797.650  8.25 0.00274  1.25000 #> 17 Furrow  GZ   3 12.25000 512.8685 11708.250 25084.360  6.25 0.00418  2.00000 #> 18 Furrow  GZ   4 10.75000 718.2468 14716.290 34789.520  7.00 0.00161  1.37500 #> 19 Furrow  GZ   5 12.50000 724.2871 15498.520 34326.710  8.25 0.00040  2.00000 #> 20 Furrow  GZ   6  7.75000 568.5102 11519.240 22808.510  6.50 0.00186  2.50000 #> 21 Furrow  GZ   7  4.50000 229.1179  3900.290  5110.770  7.75 0.00131  1.25000 #> 22 Furrow SPM   1  6.00000 323.4027  4807.740 12296.260  3.75 0.00051       NA #> 23 Furrow SPM   2  6.50000 361.5754  8255.500 15380.240  9.75 0.00109  2.75000 #> 24 Furrow SPM   3 13.00000 333.9503 15560.070 24311.700  8.00 0.00090  2.25000 #> 25 Furrow SPM   4  5.75000 376.3996  9481.420 17017.200 18.50 0.00041  0.75000 #> 26 Furrow SPM   5  7.00000 344.4121 10080.080 17497.660 14.25 0.00041  1.87500 #> 27 Furrow SPM   6  7.00000 344.0429  4323.400 19145.430 17.00 0.00101  0.50000 #> 28 Furrow SPM   7  9.25000 376.1967 10414.190 22368.160 23.50 0.00221  1.12500 #> 29   None  GZ   1  8.00000 241.9469  2751.130  6762.540  2.00 0.02440  1.42857 #> 30   None  GZ   2  2.25000 305.4742  9672.890 13146.970  1.75 0.05240  0.37500 #> 31   None  GZ   4  6.00000 493.9329  5887.710 16072.260  7.75 0.05199  0.25000 #> 32   None  GZ   5  4.75000 408.8976  8804.640 16338.010  6.25 0.02001  3.87500 #> 33   None  GZ   6  2.50000 346.9235  5402.390 13961.640  4.50 0.02683  2.75000 #> 34   None  GZ   7 10.66667 326.6411  7230.100 10072.720  6.75 0.00246  3.12500 #> 35   None SPM   1  5.75000 187.4518  2032.160  2777.700 10.50 0.01040  0.37500 #> 36   None SPM   2  2.50000 267.2553  3672.120  9086.270  4.75 0.00697  0.12500 #> 37   None SPM   3  5.25000 177.8564  4471.450  7931.380 11.00 0.01225  1.50000 #> 38   None SPM   4  7.25000 236.8101  6152.840  9678.530  8.75 0.00106  1.25000 #> 39   None SPM   5  4.75000 333.8460 11555.980 16910.440 14.75 0.00229  0.62500 #> 40   None SPM   6  2.50000 401.1302  8836.410 14485.820  9.50 0.00034  1.75000 #> 41   None SPM   7 11.50000 155.2796  1426.310  4981.840 13.25 0.00114  3.00000 #> 42   Seed  GZ   1  3.50000 240.4407  2322.830  8105.810  8.00 0.00978  5.37500 #> 43   Seed  GZ   2  4.75000 177.1445  2911.880  5353.610  9.25 0.00334  3.87600 #> 44   Seed  GZ   3  6.25000 275.5670  3815.230  7201.940  5.75 0.01450  2.50000 #> 45   Seed  GZ   4  7.25000 410.1381  9363.800 15924.150  5.75 0.01325  4.00000 #> 46   Seed  GZ   5  7.00000 363.3837  7600.050 13619.620  9.00 0.01323  1.37500 #> 47   Seed  GZ   6  8.25000 253.8870  5728.910  8847.140  8.00 0.00506  1.25000 #> 48   Seed  GZ   7  4.00000 629.9551 11189.780 27680.210  8.25 0.00580  5.00000 #> 49   Seed SPM   1  1.00000 224.1095  4621.860  9094.950  1.75 0.00797  1.00000 #> 50   Seed SPM   2  4.00000 102.2145  2351.730  2908.830  8.25 0.00231  2.37500 #> 51   Seed SPM   3  7.00000 199.8702  3105.580  6408.560  4.50 0.00660  0.62500 #> 52   Seed SPM   4  4.00000 323.7941  6456.040 13900.640  9.00 0.00040  1.25000 #> 53   Seed SPM   5  7.50000 246.6138  2464.400  7454.380 10.75 0.00933  1.12500 #> 54   Seed SPM   6  6.75000 219.4593  5097.980  6918.860 21.25 0.00254  1.62500 #> 55   Seed SPM   7  3.25000 423.6295 16016.320 27053.110 18.50 0.00088  1.50000 #>    defoliation #> 1        15.63 #> 2         9.00 #> 3        15.00 #> 4        39.38 #> 5        30.00 #> 6         7.38 #> 7        11.88 #> 8         1.63 #> 9         2.75 #> 10        0.50 #> 11        0.75 #> 12        2.00 #> 13        0.88 #> 14        0.75 #> 15        2.13 #> 16        1.88 #> 17        3.13 #> 18        0.00 #> 19        0.25 #> 20        0.00 #> 21        0.00 #> 22        0.50 #> 23        0.00 #> 24        0.00 #> 25        0.25 #> 26        0.00 #> 27        0.25 #> 28        0.25 #> 29       21.25 #> 30       30.00 #> 31       48.75 #> 32       15.38 #> 33       24.63 #> 34        9.63 #> 35        4.88 #> 36        1.00 #> 37        0.88 #> 38        1.38 #> 39        1.63 #> 40        7.63 #> 41        1.13 #> 42       17.13 #> 43       15.00 #> 44        8.00 #> 45       12.50 #> 46       10.25 #> 47       13.13 #> 48       20.00 #> 49        2.25 #> 50        3.00 #> 51        3.00 #> 52        1.75 #> 53        0.88 #> 54        2.13 #> 55        1.00"},{"path":"https://markean.github.io/melt/reference/weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Model weights — weights","title":"Model weights — weights","text":"Extracts weights model objects. weights re-scaled total number observations fitting procedure.","code":""},{"path":"https://markean.github.io/melt/reference/weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model weights — weights","text":"","code":"# S4 method for EL weights(object, ...)"},{"path":"https://markean.github.io/melt/reference/weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model weights — weights","text":"object object inherits EL, including CEL, LM, GLM. ... arguments passed methods.","code":""},{"path":"https://markean.github.io/melt/reference/weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model weights — weights","text":"numeric vector re-scaled weights.","code":""},{"path":"https://markean.github.io/melt/reference/weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model weights — weights","text":"Glenn N, Zhao Y (2007). “Weighted Empirical Likelihood Estimates Robustness Properties.” Computational Statistics & Data Analysis, 51(10), 5130--5141. doi:10.1016/j.csda.2006.07.032 .","code":""},{"path":"https://markean.github.io/melt/reference/weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model weights — weights","text":"","code":"data(\"airquality\") x <- airquality$Wind w <- airquality$Day fit <- el_mean(x, par = 10, weights = w) weights(fit) #>   [1] 0.06327543 0.12655087 0.18982630 0.25310174 0.31637717 0.37965261 #>   [7] 0.44292804 0.50620347 0.56947891 0.63275434 0.69602978 0.75930521 #>  [13] 0.82258065 0.88585608 0.94913151 1.01240695 1.07568238 1.13895782 #>  [19] 1.20223325 1.26550868 1.32878412 1.39205955 1.45533499 1.51861042 #>  [25] 1.58188586 1.64516129 1.70843672 1.77171216 1.83498759 1.89826303 #>  [31] 1.96153846 0.06327543 0.12655087 0.18982630 0.25310174 0.31637717 #>  [37] 0.37965261 0.44292804 0.50620347 0.56947891 0.63275434 0.69602978 #>  [43] 0.75930521 0.82258065 0.88585608 0.94913151 1.01240695 1.07568238 #>  [49] 1.13895782 1.20223325 1.26550868 1.32878412 1.39205955 1.45533499 #>  [55] 1.51861042 1.58188586 1.64516129 1.70843672 1.77171216 1.83498759 #>  [61] 1.89826303 0.06327543 0.12655087 0.18982630 0.25310174 0.31637717 #>  [67] 0.37965261 0.44292804 0.50620347 0.56947891 0.63275434 0.69602978 #>  [73] 0.75930521 0.82258065 0.88585608 0.94913151 1.01240695 1.07568238 #>  [79] 1.13895782 1.20223325 1.26550868 1.32878412 1.39205955 1.45533499 #>  [85] 1.51861042 1.58188586 1.64516129 1.70843672 1.77171216 1.83498759 #>  [91] 1.89826303 1.96153846 0.06327543 0.12655087 0.18982630 0.25310174 #>  [97] 0.31637717 0.37965261 0.44292804 0.50620347 0.56947891 0.63275434 #> [103] 0.69602978 0.75930521 0.82258065 0.88585608 0.94913151 1.01240695 #> [109] 1.07568238 1.13895782 1.20223325 1.26550868 1.32878412 1.39205955 #> [115] 1.45533499 1.51861042 1.58188586 1.64516129 1.70843672 1.77171216 #> [121] 1.83498759 1.89826303 1.96153846 0.06327543 0.12655087 0.18982630 #> [127] 0.25310174 0.31637717 0.37965261 0.44292804 0.50620347 0.56947891 #> [133] 0.63275434 0.69602978 0.75930521 0.82258065 0.88585608 0.94913151 #> [139] 1.01240695 1.07568238 1.13895782 1.20223325 1.26550868 1.32878412 #> [145] 1.39205955 1.45533499 1.51861042 1.58188586 1.64516129 1.70843672 #> [151] 1.77171216 1.83498759 1.89826303"},{"path":[]},{"path":"https://markean.github.io/melt/news/index.html","id":"new-features-1-7-0-9400","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"melt 1.7.0.9400 (development version)","text":"el_lm() el_glm() gain argument offset. el_glm() accepts quasipoisson family \"identity\" link function argument family. elt() accepts character vector argument lhs, allowing symbolic description hypothesis. plot() applicable object inherits EL plot empirical likelihood displacement values versus observation index. New dataset thiamethoxam added.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"minor-improvements-1-7-0-9400","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"melt 1.7.0.9400 (development version)","text":"coef() getDF() applicable object class EMLT. print() shows tested hypothesis applied object class ELT. print() shows information applied object class ELMT. Internal routines projection operation compute explicit inverse (thanks @awstringer1).","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"bug-fixes-1-7-0-9400","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"melt 1.7.0.9400 (development version)","text":"elmt() returns correct critical value applied object class QGLM.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-170","dir":"Changelog","previous_headings":"","what":"melt 1.7.0","title":"melt 1.7.0","text":"CRAN release: 2022-08-12","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"new-features-1-7-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"melt 1.7.0","text":"el_glm() accepts quasipoisson family \"log\" link function argument family. New accessor methods added (chisq(), critVal(), getDF(), getOptim(), sigTests(), logL(), pVal()). conv() applicable object returned summary().","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"minor-improvements-1-7-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"melt 1.7.0","text":"print() shows class-specific information. p.value returned el_eval() renamed pval consistency functions.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"bug-fixes-1-7-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"melt 1.7.0","text":"confint() confreg() applicable object whose data NULL.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-160","dir":"Changelog","previous_headings":"","what":"melt 1.6.0","title":"melt 1.6.0","text":"CRAN release: 2022-07-10","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"breaking-changes-1-6-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"melt 1.6.0","text":"el_mean() takes arguments different order comply ‘tidyverse’ style. takes data argument x first, followed parameter specification par el_mean(x, par). lht() renamed elt(). model argument el_mean(), el_lm(), el_glm() removed. Use keep_data el_control().","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"new-features-1-6-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"melt 1.6.0","text":"New package dependencies added (BH, dqrng, graphics). New elt() replaces lht(). accepts additional arguments alpha calibrate. New el_sd() performs empirical likelihood test standard deviation. New elmt() tests multiple hypotheses empirical likelihood. New weights() extracts re-scaled weights model. New formula() extracts model formula used model. New nobs() extracts number observations model. New conv() extracts convergence status model. New logLR() extracts log empirical likelihood ratio model. el_control() gains additional arguments verbose, keep_data, seed, b, m.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"minor-improvements-1-6-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"melt 1.6.0","text":"cv argument confint() confreg() defaults NULL. non-NULL, level ignored. probit link produces accurate result el_glm() print() method EL object shows whether data weighted . row column names () input data preserved fitted EL object.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"bug-fixes-1-6-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"melt 1.6.0","text":"confint() confreg() check cv argument compatible th value set control_el().","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-152","dir":"Changelog","previous_headings":"","what":"melt 1.5.2","title":"melt 1.5.2","text":"CRAN release: 2022-06-15","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"new-features-1-5-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"melt 1.5.2","text":"lht() accepts numeric vector matrix lhs rhs arguments. OpenMP parallelization available confint() specifying nthreads control argument.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"deprecated-and-defunct-1-5-2","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"melt 1.5.2","text":"el_test() removed. el_pairwise() deprecated removed future release.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-151","dir":"Changelog","previous_headings":"","what":"melt 1.5.1","title":"melt 1.5.1","text":"CRAN release: 2022-05-06","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"bug-fixes-1-5-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"melt 1.5.1","text":"Unit test errors fixed.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-150","dir":"Changelog","previous_headings":"","what":"melt 1.5.0","title":"melt 1.5.0","text":"CRAN release: 2022-05-03","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"new-features-1-5-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"melt 1.5.0","text":"S4 classes, generics, methods adopted throughout package. New confreg() constructs confidence regions. New eld() computes empirical likelihood displacement values. New el_control() specifies control argument. New el_glm() performs empirical likelihood tests generalized linear models. families link functions supported future release. confint() gains cv argument user-supplied critical value.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"deprecated-and-defunct-1-5-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"melt 1.5.0","text":"el_aov() removed. el_test() deprecated removed future release.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-140","dir":"Changelog","previous_headings":"","what":"melt 1.4.0","title":"melt 1.4.0","text":"CRAN release: 2022-04-03","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"new-features-1-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"melt 1.4.0","text":"New lht() performs linear hypothesis testing. New confint() constructs confidence intervals. New logLik() extracts empirical log-likelihood.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"deprecated-and-defunct-1-4-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"melt 1.4.0","text":"el_aov() deprecated favor el_lm(). removed future release.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-130","dir":"Changelog","previous_headings":"","what":"melt 1.3.0","title":"melt 1.3.0","text":"CRAN release: 2022-03-07","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"melt 1.3.0","text":"el_eval() added direct computation custom estimating functions. el_mean() el_lm() accepts optional weights argument weighted EL. Arguments optimization now handled new control argument. used functions future releases.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-120","dir":"Changelog","previous_headings":"","what":"melt 1.2.0","title":"melt 1.2.0","text":"CRAN release: 2022-01-30","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"melt 1.2.0","text":"New el_lm() performs empirical likelihood tests linear models.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-110","dir":"Changelog","previous_headings":"","what":"melt 1.1.0","title":"melt 1.1.0","text":"CRAN release: 2021-12-22","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"melt 1.1.0","text":"New el_aov() performs one-way analysis variance.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-101","dir":"Changelog","previous_headings":"","what":"melt 1.0.1","title":"melt 1.0.1","text":"CRAN release: 2021-10-08","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"melt 1.0.1","text":"Header file issues related OpenMP C++ array class fixed.","code":""},{"path":"https://markean.github.io/melt/news/index.html","id":"melt-100","dir":"Changelog","previous_headings":"","what":"melt 1.0.0","title":"melt 1.0.0","text":"CRAN release: 2021-09-29 Released CRAN.","code":""}]
